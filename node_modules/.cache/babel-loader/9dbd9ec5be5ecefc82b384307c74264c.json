{"ast":null,"code":"function repeatStringNumTimes(string, times) {\n  let repeatedString = \"\";\n\n  while (times > 0) {\n    repeatedString += string;\n    times--;\n  }\n\n  return repeatedString;\n}\n\nmodule.exports = (value, targetLength, padString) => {\n  targetLength = targetLength >> 0; // truncate if number or convert non-number to 0;\n\n  padString = String(typeof padString !== 'undefined' ? padString : ' ');\n\n  if (value.length > targetLength) {\n    return String(value);\n  } else {\n    targetLength = targetLength - value.length;\n\n    if (targetLength > padString.length) {\n      padString += repeatStringNumTimes(padString, targetLength / padString.length);\n    }\n\n    return padString.slice(0, targetLength) + String(value);\n  }\n};","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/analytics/stringPad.js"],"names":["repeatStringNumTimes","string","times","repeatedString","module","exports","value","targetLength","padString","String","length","slice"],"mappings":"AAAA,SAASA,oBAAT,CAA8BC,MAA9B,EAAsCC,KAAtC,EAA6C;AAC3C,MAAIC,cAAc,GAAG,EAArB;;AACA,SAAOD,KAAK,GAAG,CAAf,EAAkB;AAChBC,IAAAA,cAAc,IAAIF,MAAlB;AACAC,IAAAA,KAAK;AACN;;AACD,SAAOC,cAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQC,YAAR,EAAsBC,SAAtB,KAAoC;AACnDD,EAAAA,YAAY,GAAGA,YAAY,IAAI,CAA/B,CADmD,CACjB;;AAClCC,EAAAA,SAAS,GAAGC,MAAM,CAAE,OAAOD,SAAP,KAAqB,WAArB,GAAmCA,SAAnC,GAA+C,GAAjD,CAAlB;;AACA,MAAIF,KAAK,CAACI,MAAN,GAAeH,YAAnB,EAAiC;AAC/B,WAAOE,MAAM,CAACH,KAAD,CAAb;AACD,GAFD,MAEO;AACLC,IAAAA,YAAY,GAAGA,YAAY,GAAGD,KAAK,CAACI,MAApC;;AACA,QAAIH,YAAY,GAAGC,SAAS,CAACE,MAA7B,EAAqC;AACnCF,MAAAA,SAAS,IAAIR,oBAAoB,CAACQ,SAAD,EAAYD,YAAY,GAAGC,SAAS,CAACE,MAArC,CAAjC;AACD;;AACD,WAAOF,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAmBJ,YAAnB,IAAmCE,MAAM,CAACH,KAAD,CAAhD;AACD;AACF,CAZD","sourcesContent":["function repeatStringNumTimes(string, times) {\n  let repeatedString = \"\";\n  while (times > 0) {\n    repeatedString += string;\n    times--;\n  }\n  return repeatedString;\n}\n\nmodule.exports = (value, targetLength, padString) => {\n  targetLength = targetLength >> 0; // truncate if number or convert non-number to 0;\n  padString = String((typeof padString !== 'undefined' ? padString : ' '));\n  if (value.length > targetLength) {\n    return String(value);\n  } else {\n    targetLength = targetLength - value.length;\n    if (targetLength > padString.length) {\n      padString += repeatStringNumTimes(padString, targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + String(value);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}