{"ast":null,"code":"const fs = require('fs');\nconst {\n  extname,\n  basename\n} = require('path');\nconst Q = require('q');\nconst Writable = require(\"stream\").Writable;\nconst urlLib = require('url');\n\n// eslint-disable-next-line import/order\nconst {\n  upload_prefix\n} = require(\"./config\")();\nconst isSecure = !(upload_prefix && upload_prefix.slice(0, 5) === 'http:');\nconst https = isSecure ? require('https') : require('http');\nconst Cache = require('./cache');\nconst utils = require(\"./utils\");\nconst UploadStream = require('./upload_stream');\nconst config = require(\"./config\");\nconst ensureOption = require('./utils/ensureOption').defaults(config());\nconst agent = config.api_proxy ? new https.Agent(config.api_proxy) : null;\nconst {\n  build_upload_params,\n  extend,\n  includes,\n  isEmpty,\n  isObject,\n  isRemoteUrl,\n  merge,\n  pickOnlyExistingValues\n} = utils;\nexports.unsigned_upload_stream = function unsigned_upload_stream(upload_preset, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return exports.upload_stream(callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\nexports.upload_stream = function upload_stream(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return exports.upload(null, callback, extend({\n    stream: true\n  }, options));\n};\nexports.unsigned_upload = function unsigned_upload(file, upload_preset, callback) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return exports.upload(file, callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\nexports.upload = function upload(file, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"upload\", callback, options, function () {\n    let params = build_upload_params(options);\n    return isRemoteUrl(file) ? [params, {\n      file: file\n    }] : [params, {}, file];\n  });\n};\nexports.upload_large = function upload_large(path, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (path != null && isRemoteUrl(path)) {\n    // upload a remote file\n    return exports.upload(path, callback, options);\n  }\n  if (path != null && !options.filename) {\n    options.filename = path.split(/(\\\\|\\/)/g).pop().replace(/\\.[^/.]+$/, \"\");\n  }\n  return exports.upload_chunked(path, callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\nexports.upload_chunked = function upload_chunked(path, callback, options) {\n  let file_reader = fs.createReadStream(path);\n  let out_stream = exports.upload_chunked_stream(callback, options);\n  return file_reader.pipe(out_stream);\n};\nclass Chunkable extends Writable {\n  constructor(options) {\n    super(options);\n    this.chunk_size = options.chunk_size != null ? options.chunk_size : 20000000;\n    this.buffer = Buffer.alloc(0);\n    this.active = true;\n    this.on('finish', () => {\n      if (this.active) {\n        this.emit('ready', this.buffer, true, function () {});\n      }\n    });\n  }\n  _write(data, encoding, done) {\n    if (!this.active) {\n      done();\n    }\n    if (this.buffer.length + data.length <= this.chunk_size) {\n      this.buffer = Buffer.concat([this.buffer, data], this.buffer.length + data.length);\n      done();\n    } else {\n      const grab = this.chunk_size - this.buffer.length;\n      this.buffer = Buffer.concat([this.buffer, data.slice(0, grab)], this.buffer.length + grab);\n      this.emit('ready', this.buffer, false, active => {\n        this.active = active;\n        if (this.active) {\n          // Start processing the remaining data\n          const remaining = data.slice(grab);\n          this.buffer = Buffer.alloc(0); // Reset the buffer\n          this._write(remaining, encoding, done); // Process the remaining data\n        }\n      });\n    }\n  }\n}\nexports.upload_large_stream = function upload_large_stream(_unused_, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return exports.upload_chunked_stream(callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\nexports.upload_chunked_stream = function upload_chunked_stream(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = extend({}, options, {\n    stream: true\n  });\n  options.x_unique_upload_id = utils.random_public_id();\n  let params = build_upload_params(options);\n  let chunk_size = options.chunk_size != null ? options.chunk_size : options.part_size;\n  let chunker = new Chunkable({\n    chunk_size: chunk_size\n  });\n  let sent = 0;\n  chunker.on('ready', function (buffer, is_last, done) {\n    let chunk_start = sent;\n    sent += buffer.length;\n    options.content_range = `bytes ${chunk_start}-${sent - 1}/${is_last ? sent : -1}`;\n    params.timestamp = utils.timestamp();\n    let finished_part = function (result) {\n      const errorOrLast = result.error != null || is_last;\n      if (errorOrLast && typeof callback === \"function\") {\n        callback(result);\n      }\n      return done(!errorOrLast);\n    };\n    let stream = call_api(\"upload\", finished_part, options, function () {\n      return [params, {}, buffer];\n    });\n    return stream.write(buffer, 'buffer', function () {\n      return stream.end();\n    });\n  });\n  return chunker;\n};\nexports.explicit = function explicit(public_id, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"explicit\", callback, options, function () {\n    return utils.build_explicit_api_params(public_id, options);\n  });\n};\n\n// Creates a new archive in the server and returns information in JSON format\nexports.create_archive = function create_archive(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let target_format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return call_api(\"generate_archive\", callback, options, function () {\n    let opt = utils.archive_params(options);\n    if (target_format) {\n      opt.target_format = target_format;\n    }\n    return [opt];\n  });\n};\n\n// Creates a new zip archive in the server and returns information in JSON format\nexports.create_zip = function create_zip(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return exports.create_archive(callback, options, \"zip\");\n};\nexports.create_slideshow = function create_slideshow(options, callback) {\n  options.resource_type = ensureOption(options, \"resource_type\", \"video\");\n  return call_api(\"create_slideshow\", callback, options, function () {\n    // Generate a transformation from the manifest_transformation key, which should be a valid transformation\n    const manifest_transformation = utils.generate_transformation_string(extend({}, options.manifest_transformation));\n\n    // Try to use {options.transformation} to generate a transformation (Example: options.transformation.width, options.transformation.height)\n    const transformation = utils.generate_transformation_string(extend({}, ensureOption(options, 'transformation', {})));\n    return [{\n      timestamp: utils.timestamp(),\n      manifest_transformation: manifest_transformation,\n      upload_preset: options.upload_preset,\n      overwrite: options.overwrite,\n      public_id: options.public_id,\n      notification_url: options.notification_url,\n      manifest_json: options.manifest_json,\n      tags: options.tags,\n      transformation: transformation\n    }];\n  });\n};\nexports.destroy = function destroy(public_id, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"destroy\", callback, options, function () {\n    return [{\n      timestamp: utils.timestamp(),\n      type: options.type,\n      invalidate: options.invalidate,\n      public_id: public_id,\n      notification_url: options.notification_url\n    }];\n  });\n};\nexports.rename = function rename(from_public_id, to_public_id, callback) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_api(\"rename\", callback, options, function () {\n    return [{\n      timestamp: utils.timestamp(),\n      type: options.type,\n      from_public_id: from_public_id,\n      to_public_id: to_public_id,\n      overwrite: options.overwrite,\n      invalidate: options.invalidate,\n      to_type: options.to_type,\n      context: options.context,\n      metadata: options.metadata,\n      notification_url: options.notification_url\n    }];\n  });\n};\nconst TEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\", \"background\", \"opacity\", \"text_decoration\", \"font_hinting\", \"font_antialiasing\"];\nexports.text = function text(content, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"text\", callback, options, function () {\n    let textParams = pickOnlyExistingValues(options, ...TEXT_PARAMS);\n    let params = {\n      timestamp: utils.timestamp(),\n      text: content,\n      ...textParams\n    };\n    return [params];\n  });\n};\n\n/**\n * Generate a sprite by merging multiple images into a single large image for reducing network overhead and bypassing\n * download limitations.\n *\n * The process produces 2 files as follows:\n * - A single image file containing all the images with the specified tag (PNG by default).\n * - A CSS file that includes the style class names and the location of the individual images in the sprite.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.generate_sprite = function generate_sprite(tag, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"sprite\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\n\n/**\n * Returns a signed url to download a sprite\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_generated_sprite = function download_generated_sprite(tag) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return utils.api_download_url(\"sprite\", utils.build_multi_and_sprite_params(tag, options), options);\n};\n\n/**\n * Returns a signed url to download a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from\n * multiple image assets.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_multi = function download_multi(tag) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return utils.api_download_url(\"multi\", utils.build_multi_and_sprite_params(tag, options), options);\n};\n\n/**\n * Creates either a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from multiple image\n * assets.\n *\n * Each asset is included as a single frame of the resulting animated image/video, or a page of the PDF (sorted\n * alphabetically by their Public ID).\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.multi = function multi(tag, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"multi\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\nexports.explode = function explode(public_id, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"explode\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [{\n      timestamp: utils.timestamp(),\n      public_id: public_id,\n      transformation: transformation,\n      format: options.format,\n      type: options.type,\n      notification_url: options.notification_url\n    }];\n  });\n};\n\n/**\n *\n * @param {String}          tag                  The tag or tags to assign. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids           A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.add_tag = function add_tag(tag) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const exclusive = utils.option_consume(\"exclusive\", options);\n  const command = exclusive ? \"set_exclusive\" : \"add\";\n  return call_tags_api(tag, command, public_ids, callback, options);\n};\n\n/**\n * @param {String}          tag                  The tag or tags to remove. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids            A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.remove_tag = function remove_tag(tag) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_tags_api(tag, \"remove\", public_ids, callback, options);\n};\nexports.remove_all_tags = function remove_all_tags() {\n  let public_ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_tags_api(null, \"remove_all\", public_ids, callback, options);\n};\nexports.replace_tag = function replace_tag(tag) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_tags_api(tag, \"replace\", public_ids, callback, options);\n};\nfunction call_tags_api(tag, command) {\n  let public_ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let callback = arguments.length > 3 ? arguments[3] : undefined;\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  return call_api(\"tags\", callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (tag != null) {\n      params.tag = tag;\n    }\n    return [params];\n  });\n}\nexports.add_context = function add_context(context) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_context_api(context, 'add', public_ids, callback, options);\n};\nexports.remove_all_context = function remove_all_context() {\n  let public_ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_context_api(null, 'remove_all', public_ids, callback, options);\n};\nfunction call_context_api(context, command) {\n  let public_ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let callback = arguments.length > 3 ? arguments[3] : undefined;\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  return call_api('context', callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (context != null) {\n      params.context = utils.encode_context(context);\n    }\n    return [params];\n  });\n}\n\n/**\n * Cache (part of) the upload results.\n * @param result\n * @param {object} options\n * @param {string} options.type\n * @param {string} options.resource_type\n */\nfunction cacheResults(result, _ref) {\n  let {\n    type,\n    resource_type\n  } = _ref;\n  if (result.responsive_breakpoints) {\n    result.responsive_breakpoints.forEach(_ref2 => {\n      let {\n        transformation,\n        url,\n        breakpoints\n      } = _ref2;\n      return Cache.set(result.public_id, {\n        type,\n        resource_type,\n        raw_transformation: transformation,\n        format: extname(breakpoints[0].url).slice(1)\n      }, breakpoints.map(i => i.width));\n    });\n  }\n}\nfunction parseResult(buffer, res) {\n  let result = '';\n  try {\n    result = JSON.parse(buffer);\n    if (result.error && !result.error.name) {\n      result.error.name = \"Error\";\n    }\n  } catch (jsonError) {\n    result = {\n      error: {\n        message: `Server return invalid JSON response. Status Code ${res.statusCode}. ${jsonError}`,\n        name: \"Error\"\n      }\n    };\n  }\n  return result;\n}\nfunction call_api(action, callback, options, get_params) {\n  if (typeof callback !== \"function\") {\n    callback = function () {};\n  }\n  const USE_PROMISES = !options.disable_promises;\n  let deferred = Q.defer();\n  if (options == null) {\n    options = {};\n  }\n  let [params, unsigned_params, file] = get_params.call();\n  params = utils.process_request_params(params, options);\n  params = extend(params, unsigned_params);\n  let api_url = utils.api_url(action, options);\n  let boundary = utils.random_public_id();\n  let errorRaised = false;\n  let handle_response = function (res) {\n    // let buffer;\n    if (errorRaised) {\n\n      // Already reported\n    } else if (res.error) {\n      errorRaised = true;\n      if (USE_PROMISES) {\n        deferred.reject(res);\n      }\n      callback(res);\n    } else if (includes([200, 400, 401, 404, 420, 500], res.statusCode)) {\n      let buffer = \"\";\n      res.on(\"data\", d => {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", () => {\n        let result;\n        if (errorRaised) {\n          return;\n        }\n        result = parseResult(buffer, res);\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n          if (USE_PROMISES) {\n            deferred.reject(result.error);\n          }\n        } else {\n          cacheResults(result, options);\n          if (USE_PROMISES) {\n            deferred.resolve(result);\n          }\n        }\n        callback(result);\n      });\n      res.on(\"error\", error => {\n        errorRaised = true;\n        if (USE_PROMISES) {\n          deferred.reject(error);\n        }\n        callback({\n          error\n        });\n      });\n    } else {\n      let error = {\n        message: `Server returned unexpected status code - ${res.statusCode}`,\n        http_code: res.statusCode,\n        name: \"UnexpectedResponse\"\n      };\n      if (USE_PROMISES) {\n        deferred.reject(error);\n      }\n      callback({\n        error\n      });\n    }\n  };\n  let post_data = utils.hashToParameters(params).filter(_ref3 => {\n    let [key, value] = _ref3;\n    return value != null;\n  }).map(_ref4 => {\n    let [key, value] = _ref4;\n    return Buffer.from(encodeFieldPart(boundary, key, value), 'utf8');\n  });\n  let result = post(api_url, post_data, boundary, file, handle_response, options);\n  if (isObject(result)) {\n    return result;\n  }\n  if (USE_PROMISES) {\n    return deferred.promise;\n  }\n}\nfunction post(url, post_data, boundary, file, callback, options) {\n  let file_header;\n  let finish_buffer = Buffer.from(\"--\" + boundary + \"--\", 'ascii');\n  let oauth_token = options.oauth_token || config().oauth_token;\n  if (file != null || options.stream) {\n    // eslint-disable-next-line no-nested-ternary\n    let filename = options.stream ? options.filename ? options.filename : \"file\" : basename(file);\n    file_header = Buffer.from(encodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary');\n  }\n  let post_options = urlLib.parse(url);\n  let headers = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'User-Agent': utils.getUserAgent()\n  };\n  if (options.content_range != null) {\n    headers['Content-Range'] = options.content_range;\n  }\n  if (options.x_unique_upload_id != null) {\n    headers['X-Unique-Upload-Id'] = options.x_unique_upload_id;\n  }\n  if (options.extra_headers !== null) {\n    headers = merge(headers, options.extra_headers);\n  }\n  if (oauth_token != null) {\n    headers.Authorization = `Bearer ${oauth_token}`;\n  }\n  post_options = extend(post_options, {\n    method: 'POST',\n    headers: headers\n  });\n  if (options.agent != null) {\n    post_options.agent = options.agent;\n  }\n  let proxy = options.api_proxy || config().api_proxy;\n  if (!isEmpty(proxy)) {\n    if (!post_options.agent && agent) {\n      post_options.agent = agent;\n    } else if (!post_options.agent) {\n      post_options.agent = new https.Agent(proxy);\n    } else {\n      console.warn(\"Proxy is set, but request uses a custom agent, proxy is ignored.\");\n    }\n  }\n  let post_request = https.request(post_options, callback);\n  let upload_stream = new UploadStream({\n    boundary\n  });\n  upload_stream.pipe(post_request);\n  let timeout = false;\n  post_request.on(\"error\", function (error) {\n    if (timeout) {\n      error = {\n        message: \"Request Timeout\",\n        http_code: 499,\n        name: \"TimeoutError\"\n      };\n    }\n    return callback({\n      error\n    });\n  });\n  post_request.setTimeout(options.timeout != null ? options.timeout : 60000, function () {\n    timeout = true;\n    return post_request.abort();\n  });\n  post_data.forEach(postDatum => post_request.write(postDatum));\n  if (options.stream) {\n    post_request.write(file_header);\n    return upload_stream;\n  }\n  if (file != null) {\n    post_request.write(file_header);\n    fs.createReadStream(file).on('error', function (error) {\n      callback({\n        error: error\n      });\n      return post_request.abort();\n    }).pipe(upload_stream);\n  } else {\n    post_request.write(finish_buffer);\n    post_request.end();\n  }\n  return true;\n}\nfunction encodeFieldPart(boundary, name, value) {\n  return [`--${boundary}\\r\\n`, `Content-Disposition: form-data; name=\"${name}\"\\r\\n`, '\\r\\n', `${value}\\r\\n`, ''].join('');\n}\nfunction encodeFilePart(boundary, type, name, filename) {\n  return [`--${boundary}\\r\\n`, `Content-Disposition: form-data; name=\"${name}\"; filename=\"${filename}\"\\r\\n`, `Content-Type: ${type}\\r\\n`, '\\r\\n', ''].join('');\n}\nexports.direct_upload = function direct_upload(callback_url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let params = build_upload_params(extend({\n    callback: callback_url\n  }, options));\n  params = utils.process_request_params(params, options);\n  let api_url = utils.api_url(\"upload\", options);\n  return {\n    hidden_fields: params,\n    form_attrs: {\n      action: api_url,\n      method: \"POST\",\n      enctype: \"multipart/form-data\"\n    }\n  };\n};\nexports.upload_tag_params = function upload_tag_params() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let params = build_upload_params(options);\n  params = utils.process_request_params(params, options);\n  return JSON.stringify(params);\n};\nexports.upload_url = function upload_url() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (options.resource_type == null) {\n    options.resource_type = \"auto\";\n  }\n  return utils.api_url(\"upload\", options);\n};\nexports.image_upload_tag = function image_upload_tag(field) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let html_options = options.html || {};\n  let tag_options = extend({\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options.class, \"cloudinary-fileupload\"].join(\" \")\n  }, html_options);\n  return `<input ${utils.html_attrs(tag_options)}/>`;\n};\nexports.unsigned_image_upload_tag = function unsigned_image_upload_tag(field, upload_preset) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return exports.image_upload_tag(field, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\n/**\n * Populates metadata fields with the given values. Existing values will be overwritten.\n *\n * @param {Object}   metadata   A list of custom metadata fields (by external_id) and the values to assign to each\n * @param {Array}    public_ids The public IDs of the resources to update\n * @param {Function} callback   Callback function\n * @param {Object}   options    Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata = function update_metadata(metadata, public_ids, callback) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_api(\"metadata\", callback, options, function () {\n    let params = {\n      metadata: utils.encode_context(metadata),\n      public_ids: utils.build_array(public_ids),\n      timestamp: utils.timestamp(),\n      type: options.type,\n      clear_invalid: options.clear_invalid\n    };\n    return [params];\n  });\n};","map":{"version":3,"names":["fs","require","extname","basename","Q","Writable","urlLib","upload_prefix","isSecure","slice","https","Cache","utils","UploadStream","config","ensureOption","defaults","agent","api_proxy","Agent","build_upload_params","extend","includes","isEmpty","isObject","isRemoteUrl","merge","pickOnlyExistingValues","exports","unsigned_upload_stream","upload_preset","callback","options","arguments","length","undefined","upload_stream","unsigned","upload","stream","unsigned_upload","file","call_api","params","upload_large","path","filename","split","pop","replace","upload_chunked","resource_type","file_reader","createReadStream","out_stream","upload_chunked_stream","pipe","Chunkable","constructor","chunk_size","buffer","Buffer","alloc","active","on","emit","_write","data","encoding","done","concat","grab","remaining","upload_large_stream","_unused_","x_unique_upload_id","random_public_id","part_size","chunker","sent","is_last","chunk_start","content_range","timestamp","finished_part","result","errorOrLast","error","write","end","explicit","public_id","build_explicit_api_params","create_archive","target_format","opt","archive_params","create_zip","create_slideshow","manifest_transformation","generate_transformation_string","transformation","overwrite","notification_url","manifest_json","tags","destroy","type","invalidate","rename","from_public_id","to_public_id","to_type","context","metadata","TEXT_PARAMS","text","content","textParams","generate_sprite","tag","build_multi_and_sprite_params","download_generated_sprite","api_download_url","download_multi","multi","explode","format","add_tag","public_ids","exclusive","option_consume","command","call_tags_api","remove_tag","remove_all_tags","replace_tag","build_array","add_context","call_context_api","remove_all_context","encode_context","cacheResults","_ref","responsive_breakpoints","forEach","_ref2","url","breakpoints","set","raw_transformation","map","i","width","parseResult","res","JSON","parse","name","jsonError","message","statusCode","action","get_params","USE_PROMISES","disable_promises","deferred","defer","unsigned_params","call","process_request_params","api_url","boundary","errorRaised","handle_response","reject","d","http_code","resolve","post_data","hashToParameters","filter","_ref3","key","value","_ref4","from","encodeFieldPart","post","promise","file_header","finish_buffer","oauth_token","encodeFilePart","post_options","headers","getUserAgent","extra_headers","Authorization","method","proxy","console","warn","post_request","request","timeout","setTimeout","abort","postDatum","join","direct_upload","callback_url","hidden_fields","form_attrs","enctype","upload_tag_params","stringify","upload_url","image_upload_tag","field","html_options","html","tag_options","class","html_attrs","unsigned_image_upload_tag","update_metadata","clear_invalid"],"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/uploader.js"],"sourcesContent":["const fs = require('fs');\nconst { extname, basename } = require('path');\nconst Q = require('q');\nconst Writable = require(\"stream\").Writable;\nconst urlLib = require('url');\n\n// eslint-disable-next-line import/order\nconst { upload_prefix } = require(\"./config\")();\n\nconst isSecure = !(upload_prefix && upload_prefix.slice(0, 5) === 'http:');\nconst https = isSecure ? require('https') : require('http');\n\nconst Cache = require('./cache');\nconst utils = require(\"./utils\");\nconst UploadStream = require('./upload_stream');\nconst config = require(\"./config\");\nconst ensureOption = require('./utils/ensureOption').defaults(config());\n\nconst agent = config.api_proxy ? new https.Agent(config.api_proxy) : null;\n\nconst {\n  build_upload_params,\n  extend,\n  includes,\n  isEmpty,\n  isObject,\n  isRemoteUrl,\n  merge,\n  pickOnlyExistingValues\n} = utils;\n\nexports.unsigned_upload_stream = function unsigned_upload_stream(upload_preset, callback, options = {}) {\n  return exports.upload_stream(callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\nexports.upload_stream = function upload_stream(callback, options = {}) {\n  return exports.upload(null, callback, extend({\n    stream: true\n  }, options));\n};\n\nexports.unsigned_upload = function unsigned_upload(file, upload_preset, callback, options = {}) {\n  return exports.upload(file, callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\nexports.upload = function upload(file, callback, options = {}) {\n  return call_api(\"upload\", callback, options, function () {\n    let params = build_upload_params(options);\n    return isRemoteUrl(file) ? [params, { file: file }] : [params, {}, file];\n  });\n};\n\nexports.upload_large = function upload_large(path, callback, options = {}) {\n  if ((path != null) && isRemoteUrl(path)) {\n    // upload a remote file\n    return exports.upload(path, callback, options);\n  }\n  if (path != null && !options.filename) {\n    options.filename = path.split(/(\\\\|\\/)/g).pop().replace(/\\.[^/.]+$/, \"\");\n  }\n  return exports.upload_chunked(path, callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\n\nexports.upload_chunked = function upload_chunked(path, callback, options) {\n  let file_reader = fs.createReadStream(path);\n  let out_stream = exports.upload_chunked_stream(callback, options);\n  return file_reader.pipe(out_stream);\n};\n\nclass Chunkable extends Writable {\n  constructor(options) {\n    super(options);\n    this.chunk_size = options.chunk_size != null ? options.chunk_size : 20000000;\n    this.buffer = Buffer.alloc(0);\n    this.active = true;\n    this.on('finish', () => {\n      if (this.active) {\n        this.emit('ready', this.buffer, true, function () {\n        });\n      }\n    });\n  }\n\n  _write(data, encoding, done) {\n    if (!this.active) {\n      done();\n    }\n    if (this.buffer.length + data.length <= this.chunk_size) {\n      this.buffer = Buffer.concat([this.buffer, data], this.buffer.length + data.length);\n      done();\n    } else {\n      const grab = this.chunk_size - this.buffer.length;\n      this.buffer = Buffer.concat([this.buffer, data.slice(0, grab)], this.buffer.length + grab);\n      this.emit('ready', this.buffer, false, (active) => {\n        this.active = active;\n        if (this.active) {\n          // Start processing the remaining data\n          const remaining = data.slice(grab);\n          this.buffer = Buffer.alloc(0); // Reset the buffer\n          this._write(remaining, encoding, done); // Process the remaining data\n        }\n      });\n    }\n  }\n}\n\nexports.upload_large_stream = function upload_large_stream(_unused_, callback, options = {}) {\n  return exports.upload_chunked_stream(callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\n\nexports.upload_chunked_stream = function upload_chunked_stream(callback, options = {}) {\n  options = extend({}, options, {\n    stream: true\n  });\n  options.x_unique_upload_id = utils.random_public_id();\n  let params = build_upload_params(options);\n  let chunk_size = options.chunk_size != null ? options.chunk_size : options.part_size;\n  let chunker = new Chunkable({\n    chunk_size: chunk_size\n  });\n  let sent = 0;\n  chunker.on('ready', function (buffer, is_last, done) {\n    let chunk_start = sent;\n    sent += buffer.length;\n    options.content_range = `bytes ${chunk_start}-${sent - 1}/${(is_last ? sent : -1)}`;\n    params.timestamp = utils.timestamp();\n    let finished_part = function (result) {\n      const errorOrLast = (result.error != null) || is_last;\n      if (errorOrLast && typeof callback === \"function\") {\n        callback(result);\n      }\n      return done(!errorOrLast);\n    };\n    let stream = call_api(\"upload\", finished_part, options, function () {\n      return [params, {}, buffer];\n    });\n    return stream.write(buffer, 'buffer', function () {\n      return stream.end();\n    });\n  });\n  return chunker;\n};\n\nexports.explicit = function explicit(public_id, callback, options = {}) {\n  return call_api(\"explicit\", callback, options, function () {\n    return utils.build_explicit_api_params(public_id, options);\n  });\n};\n\n// Creates a new archive in the server and returns information in JSON format\nexports.create_archive = function create_archive(callback, options = {}, target_format = null) {\n  return call_api(\"generate_archive\", callback, options, function () {\n    let opt = utils.archive_params(options);\n    if (target_format) {\n      opt.target_format = target_format;\n    }\n    return [opt];\n  });\n};\n\n// Creates a new zip archive in the server and returns information in JSON format\nexports.create_zip = function create_zip(callback, options = {}) {\n  return exports.create_archive(callback, options, \"zip\");\n};\n\n\nexports.create_slideshow = function create_slideshow(options, callback) {\n  options.resource_type = ensureOption(options, \"resource_type\", \"video\");\n  return call_api(\"create_slideshow\", callback, options, function () {\n    // Generate a transformation from the manifest_transformation key, which should be a valid transformation\n    const manifest_transformation = utils.generate_transformation_string(extend({}, options.manifest_transformation));\n\n    // Try to use {options.transformation} to generate a transformation (Example: options.transformation.width, options.transformation.height)\n    const transformation = utils.generate_transformation_string(extend({}, ensureOption(options, 'transformation', {})));\n\n    return [\n      {\n        timestamp: utils.timestamp(),\n        manifest_transformation: manifest_transformation,\n        upload_preset: options.upload_preset,\n        overwrite: options.overwrite,\n        public_id: options.public_id,\n        notification_url: options.notification_url,\n        manifest_json: options.manifest_json,\n        tags: options.tags,\n        transformation: transformation\n      }\n    ];\n  });\n};\n\n\nexports.destroy = function destroy(public_id, callback, options = {}) {\n  return call_api(\"destroy\", callback, options, function () {\n    return [\n      {\n        timestamp: utils.timestamp(),\n        type: options.type,\n        invalidate: options.invalidate,\n        public_id: public_id,\n        notification_url: options.notification_url\n      }\n    ];\n  });\n};\n\nexports.rename = function rename(from_public_id, to_public_id, callback, options = {}) {\n  return call_api(\"rename\", callback, options, function () {\n    return [\n      {\n        timestamp: utils.timestamp(),\n        type: options.type,\n        from_public_id: from_public_id,\n        to_public_id: to_public_id,\n        overwrite: options.overwrite,\n        invalidate: options.invalidate,\n        to_type: options.to_type,\n        context: options.context,\n        metadata: options.metadata,\n        notification_url: options.notification_url\n      }\n    ];\n  });\n};\n\nconst TEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\", \"background\", \"opacity\", \"text_decoration\", \"font_hinting\", \"font_antialiasing\"];\n\nexports.text = function text(content, callback, options = {}) {\n  return call_api(\"text\", callback, options, function () {\n    let textParams = pickOnlyExistingValues(options, ...TEXT_PARAMS);\n    let params = {\n      timestamp: utils.timestamp(),\n      text: content,\n      ...textParams\n    };\n\n    return [params];\n  });\n};\n\n/**\n * Generate a sprite by merging multiple images into a single large image for reducing network overhead and bypassing\n * download limitations.\n *\n * The process produces 2 files as follows:\n * - A single image file containing all the images with the specified tag (PNG by default).\n * - A CSS file that includes the style class names and the location of the individual images in the sprite.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.generate_sprite = function generate_sprite(tag, callback, options = {}) {\n  return call_api(\"sprite\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\n\n\n/**\n * Returns a signed url to download a sprite\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_generated_sprite = function download_generated_sprite(tag, options = {}) {\n  return utils.api_download_url(\"sprite\", utils.build_multi_and_sprite_params(tag, options), options);\n}\n\n/**\n * Returns a signed url to download a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from\n * multiple image assets.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_multi = function download_multi(tag, options = {}) {\n  return utils.api_download_url(\"multi\", utils.build_multi_and_sprite_params(tag, options), options);\n}\n\n/**\n * Creates either a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from multiple image\n * assets.\n *\n * Each asset is included as a single frame of the resulting animated image/video, or a page of the PDF (sorted\n * alphabetically by their Public ID).\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.multi = function multi(tag, callback, options = {}) {\n  return call_api(\"multi\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\n\nexports.explode = function explode(public_id, callback, options = {}) {\n  return call_api(\"explode\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [\n      {\n        timestamp: utils.timestamp(),\n        public_id: public_id,\n        transformation: transformation,\n        format: options.format,\n        type: options.type,\n        notification_url: options.notification_url\n      }\n    ];\n  });\n};\n\n/**\n *\n * @param {String}          tag                  The tag or tags to assign. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids           A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.add_tag = function add_tag(tag, public_ids = [], callback, options = {}) {\n  const exclusive = utils.option_consume(\"exclusive\", options);\n  const command = exclusive ? \"set_exclusive\" : \"add\";\n  return call_tags_api(tag, command, public_ids, callback, options);\n};\n\n\n/**\n * @param {String}          tag                  The tag or tags to remove. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids            A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.remove_tag = function remove_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"remove\", public_ids, callback, options);\n};\n\nexports.remove_all_tags = function remove_all_tags(public_ids = [], callback, options = {}) {\n  return call_tags_api(null, \"remove_all\", public_ids, callback, options);\n};\n\nexports.replace_tag = function replace_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"replace\", public_ids, callback, options);\n};\n\nfunction call_tags_api(tag, command, public_ids = [], callback, options = {}) {\n  return call_api(\"tags\", callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (tag != null) {\n      params.tag = tag;\n    }\n    return [params];\n  });\n}\n\nexports.add_context = function add_context(context, public_ids = [], callback, options = {}) {\n  return call_context_api(context, 'add', public_ids, callback, options);\n};\n\nexports.remove_all_context = function remove_all_context(public_ids = [], callback, options = {}) {\n  return call_context_api(null, 'remove_all', public_ids, callback, options);\n};\n\nfunction call_context_api(context, command, public_ids = [], callback, options = {}) {\n  return call_api('context', callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (context != null) {\n      params.context = utils.encode_context(context);\n    }\n    return [params];\n  });\n}\n\n/**\n * Cache (part of) the upload results.\n * @param result\n * @param {object} options\n * @param {string} options.type\n * @param {string} options.resource_type\n */\nfunction cacheResults(result, { type, resource_type }) {\n  if (result.responsive_breakpoints) {\n    result.responsive_breakpoints.forEach(\n      ({ transformation,\n        url,\n        breakpoints }) => Cache.set(\n        result.public_id,\n        { type, resource_type, raw_transformation: transformation, format: extname(breakpoints[0].url).slice(1) },\n        breakpoints.map(i => i.width)\n      )\n    );\n  }\n}\n\n\nfunction parseResult(buffer, res) {\n  let result = '';\n  try {\n    result = JSON.parse(buffer);\n    if (result.error && !result.error.name) {\n      result.error.name = \"Error\";\n    }\n  } catch (jsonError) {\n    result = {\n      error: {\n        message: `Server return invalid JSON response. Status Code ${res.statusCode}. ${jsonError}`,\n        name: \"Error\"\n      }\n    };\n  }\n  return result;\n}\n\nfunction call_api(action, callback, options, get_params) {\n  if (typeof callback !== \"function\") {\n    callback = function () {};\n  }\n\n  const USE_PROMISES = !options.disable_promises;\n\n  let deferred = Q.defer();\n  if (options == null) {\n    options = {};\n  }\n  let [params, unsigned_params, file] = get_params.call();\n  params = utils.process_request_params(params, options);\n  params = extend(params, unsigned_params);\n  let api_url = utils.api_url(action, options);\n  let boundary = utils.random_public_id();\n  let errorRaised = false;\n  let handle_response = function (res) {\n    // let buffer;\n    if (errorRaised) {\n\n      // Already reported\n    } else if (res.error) {\n      errorRaised = true;\n\n      if (USE_PROMISES) {\n        deferred.reject(res);\n      }\n      callback(res);\n    } else if (includes([200, 400, 401, 404, 420, 500], res.statusCode)) {\n      let buffer = \"\";\n      res.on(\"data\", (d) => {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", () => {\n        let result;\n        if (errorRaised) {\n          return;\n        }\n        result = parseResult(buffer, res);\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n          if (USE_PROMISES) {\n            deferred.reject(result.error);\n          }\n        } else {\n          cacheResults(result, options);\n          if (USE_PROMISES) {\n            deferred.resolve(result);\n          }\n        }\n        callback(result);\n      });\n      res.on(\"error\", (error) => {\n        errorRaised = true;\n        if (USE_PROMISES) {\n          deferred.reject(error);\n        }\n        callback({ error });\n      });\n    } else {\n      let error = {\n        message: `Server returned unexpected status code - ${res.statusCode}`,\n        http_code: res.statusCode,\n        name: \"UnexpectedResponse\"\n      };\n      if (USE_PROMISES) {\n        deferred.reject(error);\n      }\n      callback({ error });\n    }\n  };\n  let post_data = utils.hashToParameters(params)\n    .filter(([key, value]) => value != null)\n    .map(\n      ([key, value]) => Buffer.from(encodeFieldPart(boundary, key, value), 'utf8')\n    );\n  let result = post(api_url, post_data, boundary, file, handle_response, options);\n  if (isObject(result)) {\n    return result;\n  }\n\n  if (USE_PROMISES) {\n    return deferred.promise;\n  }\n}\n\nfunction post(url, post_data, boundary, file, callback, options) {\n  let file_header;\n  let finish_buffer = Buffer.from(\"--\" + boundary + \"--\", 'ascii');\n  let oauth_token = options.oauth_token || config().oauth_token;\n  if ((file != null) || options.stream) {\n    // eslint-disable-next-line no-nested-ternary\n    let filename = options.stream ? options.filename ? options.filename : \"file\" : basename(file);\n    file_header = Buffer.from(encodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary');\n  }\n  let post_options = urlLib.parse(url);\n  let headers = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'User-Agent': utils.getUserAgent()\n  };\n  if (options.content_range != null) {\n    headers['Content-Range'] = options.content_range;\n  }\n  if (options.x_unique_upload_id != null) {\n    headers['X-Unique-Upload-Id'] = options.x_unique_upload_id;\n  }\n  if (options.extra_headers !== null) {\n    headers = merge(headers, options.extra_headers);\n  }\n  if (oauth_token != null) {\n    headers.Authorization = `Bearer ${oauth_token}`;\n  }\n\n  post_options = extend(post_options, {\n    method: 'POST',\n    headers: headers\n  });\n  if (options.agent != null) {\n    post_options.agent = options.agent;\n  }\n  let proxy = options.api_proxy || config().api_proxy;\n  if (!isEmpty(proxy)) {\n    if (!post_options.agent && agent) {\n      post_options.agent = agent;\n    } else if (!post_options.agent) {\n      post_options.agent = new https.Agent(proxy);\n    } else {\n      console.warn(\"Proxy is set, but request uses a custom agent, proxy is ignored.\");\n    }\n  }\n\n  let post_request = https.request(post_options, callback);\n  let upload_stream = new UploadStream({ boundary });\n  upload_stream.pipe(post_request);\n  let timeout = false;\n  post_request.on(\"error\", function (error) {\n    if (timeout) {\n      error = {\n        message: \"Request Timeout\",\n        http_code: 499,\n        name: \"TimeoutError\"\n      };\n    }\n    return callback({ error });\n  });\n  post_request.setTimeout(options.timeout != null ? options.timeout : 60000, function () {\n    timeout = true;\n    return post_request.abort();\n  });\n  post_data.forEach(postDatum => post_request.write(postDatum));\n  if (options.stream) {\n    post_request.write(file_header);\n    return upload_stream;\n  }\n  if (file != null) {\n    post_request.write(file_header);\n    fs.createReadStream(file).on('error', function (error) {\n      callback({\n        error: error\n      });\n      return post_request.abort();\n    }).pipe(upload_stream);\n  } else {\n    post_request.write(finish_buffer);\n    post_request.end();\n  }\n  return true;\n}\n\nfunction encodeFieldPart(boundary, name, value) {\n  return [\n    `--${boundary}\\r\\n`,\n    `Content-Disposition: form-data; name=\"${name}\"\\r\\n`,\n    '\\r\\n',\n    `${value}\\r\\n`,\n    ''\n  ].join('');\n}\n\nfunction encodeFilePart(boundary, type, name, filename) {\n  return [\n    `--${boundary}\\r\\n`,\n    `Content-Disposition: form-data; name=\"${name}\"; filename=\"${filename}\"\\r\\n`,\n    `Content-Type: ${type}\\r\\n`,\n    '\\r\\n',\n    ''\n  ].join('');\n}\n\nexports.direct_upload = function direct_upload(callback_url, options = {}) {\n  let params = build_upload_params(extend({\n    callback: callback_url\n  }, options));\n  params = utils.process_request_params(params, options);\n  let api_url = utils.api_url(\"upload\", options);\n  return {\n    hidden_fields: params,\n    form_attrs: {\n      action: api_url,\n      method: \"POST\",\n      enctype: \"multipart/form-data\"\n    }\n  };\n};\n\nexports.upload_tag_params = function upload_tag_params(options = {}) {\n  let params = build_upload_params(options);\n  params = utils.process_request_params(params, options);\n  return JSON.stringify(params);\n};\n\nexports.upload_url = function upload_url(options = {}) {\n  if (options.resource_type == null) {\n    options.resource_type = \"auto\";\n  }\n  return utils.api_url(\"upload\", options);\n};\n\nexports.image_upload_tag = function image_upload_tag(field, options = {}) {\n  let html_options = options.html || {};\n  let tag_options = extend({\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options.class, \"cloudinary-fileupload\"].join(\" \")\n  }, html_options);\n  return `<input ${utils.html_attrs(tag_options)}/>`;\n};\n\nexports.unsigned_image_upload_tag = function unsigned_image_upload_tag(field, upload_preset, options = {}) {\n  return exports.image_upload_tag(field, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\n\n/**\n * Populates metadata fields with the given values. Existing values will be overwritten.\n *\n * @param {Object}   metadata   A list of custom metadata fields (by external_id) and the values to assign to each\n * @param {Array}    public_ids The public IDs of the resources to update\n * @param {Function} callback   Callback function\n * @param {Object}   options    Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata = function update_metadata(metadata, public_ids, callback, options = {}) {\n  return call_api(\"metadata\", callback, options, function () {\n    let params = {\n      metadata: utils.encode_context(metadata),\n      public_ids: utils.build_array(public_ids),\n      timestamp: utils.timestamp(),\n      type: options.type,\n      clear_invalid: options.clear_invalid\n    };\n    return [params];\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}