{"ast":null,"code":"const utils = require(\"./utils\");\n\nconst call_api = require(\"./api_client/call_api\");\n\nconst {\n  extend,\n  pickOnlyExistingValues\n} = utils;\nconst TRANSFORMATIONS_URI = \"transformations\";\n\nfunction deleteResourcesParams(options, params = {}) {\n  return extend(params, pickOnlyExistingValues(options, \"keep_original\", \"invalidate\", \"next_cursor\", \"transformations\"));\n}\n\nfunction getResourceParams(options) {\n  return pickOnlyExistingValues(options, \"exif\", \"cinemagraph_analysis\", \"colors\", \"derived_next_cursor\", \"faces\", \"image_metadata\", \"media_metadata\", \"pages\", \"phash\", \"coordinates\", \"max_results\", \"versions\", \"accessibility_analysis\", 'related', 'related_next_cursor');\n}\n\nexports.ping = function ping(callback, options = {}) {\n  return call_api(\"get\", [\"ping\"], {}, callback, options);\n};\n\nexports.usage = function usage(callback, options = {}) {\n  const uri = [\"usage\"];\n\n  if (options.date) {\n    uri.push(options.date);\n  }\n\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.resource_types = function resource_types(callback, options = {}) {\n  return call_api(\"get\", [\"resources\"], {}, callback, options);\n};\n\nexports.resources = function resources(callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type;\n  uri = [\"resources\", resource_type];\n\n  if (type != null) {\n    uri.push(type);\n  }\n\n  if (options.start_at != null && Object.prototype.toString.call(options.start_at) === '[object Date]') {\n    options.start_at = options.start_at.toUTCString();\n  }\n\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"prefix\", \"tags\", \"context\", \"direction\", \"moderations\", \"start_at\", \"metadata\", \"fields\"), callback, options);\n};\n\nexports.resources_by_tag = function resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\", \"metadata\", \"fields\"), callback, options);\n};\n\nexports.resources_by_context = function resources_by_context(key, value, callback, options = {}) {\n  let params, resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"context\"];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\", \"metadata\", \"fields\");\n  params.key = key;\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_moderation = function resources_by_moderation(kind, status, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"moderations\", kind, status];\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\", \"metadata\", \"fields\"), callback, options);\n};\n\nexports.resource_by_asset_id = function resource_by_asset_id(asset_id, callback, options = {}) {\n  const uri = [\"resources\", asset_id];\n  return call_api(\"get\", uri, getResourceParams(options), callback, options);\n};\n\nexports.resources_by_asset_folder = function resources_by_asset_folder(asset_folder, callback, options = {}) {\n  let params, uri;\n  uri = [\"resources\", 'by_asset_folder'];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"moderations\", \"fields\");\n  params.asset_folder = asset_folder;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_asset_ids = function resources_by_asset_ids(asset_ids, callback, options = {}) {\n  let params, uri;\n  uri = [\"resources\", \"by_asset_ids\"];\n  params = pickOnlyExistingValues(options, \"tags\", \"context\", \"moderations\", \"fields\");\n  params[\"asset_ids[]\"] = asset_ids;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_ids = function resources_by_ids(public_ids, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  params = pickOnlyExistingValues(options, \"tags\", \"context\", \"moderations\", \"fields\");\n  params[\"public_ids[]\"] = public_ids;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resource = function resource(public_id, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  return call_api(\"get\", uri, getResourceParams(options), callback, options);\n};\n\nexports.restore = function restore(public_ids, callback, options = {}) {\n  options.content_type = 'json';\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, \"restore\"];\n  return call_api(\"post\", uri, {\n    public_ids: public_ids,\n    versions: options.versions\n  }, callback, options);\n};\n\nexports.update = function update(public_id, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  params = utils.updateable_resource_params(options);\n\n  if (options.moderation_status != null) {\n    params.moderation_status = options.moderation_status;\n  }\n\n  if (options.clear_invalid != null) {\n    params.clear_invalid = options.clear_invalid;\n  }\n\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.delete_resources = function delete_resources(public_ids, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    \"public_ids[]\": public_ids\n  }), callback, options);\n};\n\nexports.delete_resources_by_prefix = function delete_resources_by_prefix(prefix, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    prefix: prefix\n  }), callback, options);\n};\n\nexports.delete_resources_by_tag = function delete_resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"delete\", uri, deleteResourcesParams(options), callback, options);\n};\n\nexports.delete_all_resources = function delete_all_resources(callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    all: true\n  }), callback, options);\n};\n\nconst createRelationParams = (publicIds = []) => {\n  return {\n    assets_to_relate: Array.isArray(publicIds) ? publicIds : [publicIds]\n  };\n};\n\nconst deleteRelationParams = (publicIds = []) => {\n  return {\n    assets_to_unrelate: Array.isArray(publicIds) ? publicIds : [publicIds]\n  };\n};\n\nexports.add_related_assets = (publicId, assetsToRelate, callback, options = {}) => {\n  const params = createRelationParams(assetsToRelate);\n  return call_api('post', ['resources', 'related_assets', options.resource_type, options.type, publicId], params, callback, options);\n};\n\nexports.add_related_assets_by_asset_id = (assetId, assetsToRelate, callback, options = {}) => {\n  const params = createRelationParams(assetsToRelate);\n  return call_api('post', ['resources', 'related_assets', assetId], params, callback, options);\n};\n\nexports.delete_related_assets = (publicId, assetsToUnrelate, callback, options = {}) => {\n  const params = deleteRelationParams(assetsToUnrelate);\n  return call_api('delete', ['resources', 'related_assets', options.resource_type, options.type, publicId], params, callback, options);\n};\n\nexports.delete_related_assets_by_asset_id = (assetId, assetsToUnrelate, callback, options = {}) => {\n  const params = deleteRelationParams(assetsToUnrelate);\n  return call_api('delete', ['resources', 'related_assets', assetId], params, callback, options);\n};\n\nexports.delete_derived_resources = function delete_derived_resources(derived_resource_ids, callback, options = {}) {\n  let uri;\n  uri = [\"derived_resources\"];\n  return call_api(\"delete\", uri, {\n    \"derived_resource_ids[]\": derived_resource_ids\n  }, callback, options);\n};\n\nexports.delete_derived_by_transformation = function delete_derived_by_transformation(public_ids, transformations, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = \"resources/\" + resource_type + \"/\" + type;\n  params = extend({\n    \"public_ids[]\": public_ids\n  }, pickOnlyExistingValues(options, \"invalidate\"));\n  params.keep_original = true;\n  params.transformations = utils.build_eager(transformations);\n  return call_api(\"delete\", uri, params, callback, options);\n};\n\nexports.tags = function tags(callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"tags\", resource_type];\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"prefix\"), callback, options);\n};\n\nexports.transformations = function transformations(callback, options = {}) {\n  const params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"named\");\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.transformation = function transformation(transformationName, callback, options = {}) {\n  const params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.delete_transformation = function delete_transformation(transformationName, callback, options = {}) {\n  const params = {};\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"delete\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.update_transformation = function update_transformation(transformationName, updates, callback, options = {}) {\n  const params = pickOnlyExistingValues(updates, \"allowed_for_strict\");\n  params.transformation = utils.build_eager(transformationName);\n\n  if (updates.unsafe_update != null) {\n    params.unsafe_update = utils.build_eager(updates.unsafe_update);\n  }\n\n  return call_api(\"put\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.create_transformation = function create_transformation(name, definition, callback, options = {}) {\n  const params = {\n    name\n  };\n  params.transformation = utils.build_eager(definition);\n  return call_api(\"post\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.upload_presets = function upload_presets(callback, options = {}) {\n  return call_api(\"get\", [\"upload_presets\"], pickOnlyExistingValues(options, \"next_cursor\", \"max_results\"), callback, options);\n};\n\nexports.upload_preset = function upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.delete_upload_preset = function delete_upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.update_upload_preset = function update_upload_preset(name, callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\", name];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), pickOnlyExistingValues(options, \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"put\", uri, params, callback, options);\n};\n\nexports.create_upload_preset = function create_upload_preset(callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\"];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), pickOnlyExistingValues(options, \"name\", \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.root_folders = function root_folders(callback, options = {}) {\n  let uri, params;\n  uri = [\"folders\"];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.sub_folders = function sub_folders(path, callback, options = {}) {\n  let uri, params;\n  uri = [\"folders\", path];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", uri, params, callback, options);\n};\n/**\n * Creates an empty folder\n *\n * @param {string}    path      The folder path to create\n * @param {function}  callback  Callback function\n * @param {object}    options   Configuration options\n * @returns {*}\n */\n\n\nexports.create_folder = function create_folder(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"post\", uri, {}, callback, options);\n};\n\nexports.delete_folder = function delete_folder(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.rename_folder = function rename_folder(old_path, new_path, callback, options = {}) {\n  let uri;\n  uri = ['folders', old_path];\n  let rename_folder_params = {\n    to_folder: new_path\n  };\n  options.content_type = 'json';\n  return call_api('put', uri, rename_folder_params, callback, options);\n};\n\nexports.upload_mappings = function upload_mappings(callback, options = {}) {\n  let params;\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", \"upload_mappings\", params, callback, options);\n};\n\nexports.upload_mapping = function upload_mapping(name, callback, options = {}) {\n  if (name == null) {\n    name = null;\n  }\n\n  return call_api(\"get\", 'upload_mappings', {\n    folder: name\n  }, callback, options);\n};\n\nexports.delete_upload_mapping = function delete_upload_mapping(name, callback, options = {}) {\n  return call_api(\"delete\", 'upload_mappings', {\n    folder: name\n  }, callback, options);\n};\n\nexports.update_upload_mapping = function update_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = pickOnlyExistingValues(options, \"template\");\n  params.folder = name;\n  return call_api(\"put\", 'upload_mappings', params, callback, options);\n};\n\nexports.create_upload_mapping = function create_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = pickOnlyExistingValues(options, \"template\");\n  params.folder = name;\n  return call_api(\"post\", 'upload_mappings', params, callback, options);\n};\n\nfunction publishResource(byKey, value, callback, options = {}) {\n  let params, resource_type, uri;\n  params = pickOnlyExistingValues(options, \"type\", \"invalidate\", \"overwrite\");\n  params[byKey] = value;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"publish_resources\"];\n  options = extend({\n    resource_type: resource_type\n  }, options);\n  return call_api(\"post\", uri, params, callback, options);\n}\n\nexports.publish_by_prefix = function publish_by_prefix(prefix, callback, options = {}) {\n  return publishResource(\"prefix\", prefix, callback, options);\n};\n\nexports.publish_by_tag = function publish_by_tag(tag, callback, options = {}) {\n  return publishResource(\"tag\", tag, callback, options);\n};\n\nexports.publish_by_ids = function publish_by_ids(public_ids, callback, options = {}) {\n  return publishResource(\"public_ids\", public_ids, callback, options);\n};\n\nexports.list_streaming_profiles = function list_streaming_profiles(callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles\", {}, callback, options);\n};\n\nexports.get_streaming_profile = function get_streaming_profile(name, callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.delete_streaming_profile = function delete_streaming_profile(name, callback, options = {}) {\n  return call_api(\"delete\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.update_streaming_profile = function update_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  return call_api(\"put\", \"streaming_profiles/\" + name, params, callback, options);\n};\n\nexports.create_streaming_profile = function create_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  params.name = name;\n  return call_api(\"post\", 'streaming_profiles', params, callback, options);\n};\n\nfunction updateResourcesAccessMode(access_mode, by_key, value, callback, options = {}) {\n  let params, resource_type, type;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  params = {\n    access_mode: access_mode\n  };\n  params[by_key] = value;\n  return call_api(\"post\", \"resources/\" + resource_type + \"/\" + type + \"/update_access_mode\", params, callback, options);\n}\n\nexports.search = function search(params, callback, options = {}) {\n  options.content_type = 'json';\n  return call_api(\"post\", \"resources/search\", params, callback, options);\n};\n\nexports.visual_search = function visual_search(params, callback, options = {}) {\n  const allowedParams = pickOnlyExistingValues(params, 'image_url', 'image_asset_id', 'text');\n  return call_api('get', ['resources', 'visual_search'], allowedParams, callback, options);\n};\n\nexports.search_folders = function search_folders(params, callback, options = {}) {\n  options.content_type = 'json';\n  return call_api(\"post\", \"folders/search\", params, callback, options);\n};\n\nexports.update_resources_access_mode_by_prefix = function update_resources_access_mode_by_prefix(access_mode, prefix, callback, options = {}) {\n  return updateResourcesAccessMode(access_mode, \"prefix\", prefix, callback, options);\n};\n\nexports.update_resources_access_mode_by_tag = function update_resources_access_mode_by_tag(access_mode, tag, callback, options = {}) {\n  return updateResourcesAccessMode(access_mode, \"tag\", tag, callback, options);\n};\n\nexports.update_resources_access_mode_by_ids = function update_resources_access_mode_by_ids(access_mode, ids, callback, options = {}) {\n  return updateResourcesAccessMode(access_mode, \"public_ids[]\", ids, callback, options);\n};\n/**\n * Creates a new metadata field definition\n *\n * @see https://cloudinary.com/documentation/admin_api#create_a_metadata_field\n *\n * @param {Object}   field    The field to add\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\n\n\nexports.add_metadata_field = function add_metadata_field(field, callback, options = {}) {\n  const params = pickOnlyExistingValues(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\", \"restrictions\");\n  options.content_type = \"json\";\n  return call_api(\"post\", [\"metadata_fields\"], params, callback, options);\n};\n/**\n * Returns a list of all metadata field definitions\n *\n * @see https://cloudinary.com/documentation/admin_api#get_metadata_fields\n *\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\n\n\nexports.list_metadata_fields = function list_metadata_fields(callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\"], {}, callback, options);\n};\n/**\n * Deletes a metadata field definition.\n *\n * The field should no longer be considered a valid candidate for all other endpoints\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_a_metadata_field_by_external_id\n *\n * @param {String}   field_external_id  The external id of the field to delete\n * @param {Function} callback           Callback function\n * @param {Object}   options            Configuration options\n *\n * @return {Object}\n */\n\n\nexports.delete_metadata_field = function delete_metadata_field(field_external_id, callback, options = {}) {\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id], {}, callback, options);\n};\n/**\n * Get a metadata field by external id\n *\n * @see https://cloudinary.com/documentation/admin_api#get_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to retrieve\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\n\n\nexports.metadata_field_by_field_id = function metadata_field_by_field_id(external_id, callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\", external_id], {}, callback, options);\n};\n/**\n * Updates a metadata field by external id\n *\n * Updates a metadata field definition (partially, no need to pass the entire object) passed as JSON data.\n * See {@link https://cloudinary.com/documentation/admin_api#generic_structure_of_a_metadata_field Generic structure of a metadata field} for details.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to update\n * @param {Object}   field        Updated values of metadata field\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\n\n\nexports.update_metadata_field = function update_metadata_field(external_id, field, callback, options = {}) {\n  const params = pickOnlyExistingValues(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\", \"restrictions\", \"default_disabled\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", external_id], params, callback, options);\n};\n/**\n * Updates a metadata field datasource\n *\n * Updates the datasource of a supported field type (currently only enum and set), passed as JSON data. The\n * update is partial: datasource entries with an existing external_id will be updated and entries with new\n * external_id’s (or without external_id’s) will be appended.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the field to update\n * @param {Object}   entries_external_id  Updated values for datasource\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.update_metadata_field_datasource = function update_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  const params = pickOnlyExistingValues(entries_external_id, \"values\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n/**\n * Deletes entries in a metadata field datasource\n *\n * Deletes (blocks) the datasource entries for a specified metadata field definition. Sets the state of the\n * entries to inactive. This is a soft delete, the entries still exist under the hood and can be activated again\n * with the restore datasource entries method.\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.delete_datasource_entries = function delete_datasource_entries(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    external_ids: entries_external_id\n  };\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n/**\n * Restores entries in a metadata field datasource\n *\n * Restores (unblocks) any previously deleted datasource entries for a specified metadata field definition.\n * Sets the state of the entries to active.\n *\n * @see https://cloudinary.com/documentation/admin_api#restore_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.restore_metadata_field_datasource = function restore_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    external_ids: entries_external_id\n  };\n  return call_api(\"post\", [\"metadata_fields\", field_external_id, \"datasource_restore\"], params, callback, options);\n};\n/**\n * Sorts metadata field datasource. Currently supports only value\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {String}   sort_by              Criteria for the sort. Currently supports only value\n * @param {String}   direction            Optional (gets either asc or desc)\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\n\n\nexports.order_metadata_field_datasource = function order_metadata_field_datasource(field_external_id, sort_by, direction, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    order_by: sort_by,\n    direction: direction\n  };\n  return call_api(\"post\", [\"metadata_fields\", field_external_id, \"datasource\", \"order\"], params, callback, options);\n};\n/**\n * Reorders metadata fields.\n *\n * @param {String}   order_by  Criteria for the order (one of the fields 'label', 'external_id', 'created_at').\n * @param {String}   direction Optional (gets either asc or desc).\n * @param {Function} callback  Callback function.\n * @param {Object}   options   Configuration options.\n *\n * @return {Object}\n */\n\n\nexports.reorder_metadata_fields = function reorder_metadata_fields(order_by, direction, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    order_by,\n    direction\n  };\n  return call_api(\"put\", [\"metadata_fields\", \"order\"], params, callback, options);\n};\n\nexports.list_metadata_rules = function list_metadata_rules(callback, options = {}) {\n  return call_api('get', ['metadata_rules'], {}, callback, options);\n};\n\nexports.add_metadata_rule = function add_metadata_rule(metadata_rule, callback, options = {}) {\n  options.content_type = 'json';\n  const params = pickOnlyExistingValues(metadata_rule, 'metadata_field_id', 'condition', 'result', 'name');\n  return call_api('post', ['metadata_rules'], params, callback, options);\n};\n\nexports.update_metadata_rule = function update_metadata_rule(field_external_id, updated_metadata_rule, callback, options = {}) {\n  options.content_type = 'json';\n  const params = pickOnlyExistingValues(updated_metadata_rule, 'metadata_field_id', 'condition', 'result', 'name', 'state');\n  return call_api('put', ['metadata_rules', field_external_id], params, callback, options);\n};\n\nexports.delete_metadata_rule = function delete_metadata_rule(field_external_id, callback, options = {}) {\n  return call_api('delete', ['metadata_rules', field_external_id], {}, callback, options);\n};\n\nexports.config = function config(callback, options = {}) {\n  const params = pickOnlyExistingValues(options, 'settings');\n  return call_api('get', ['config'], params, callback, options);\n};","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/api.js"],"names":["utils","require","call_api","extend","pickOnlyExistingValues","TRANSFORMATIONS_URI","deleteResourcesParams","options","params","getResourceParams","exports","ping","callback","usage","uri","date","push","resource_types","resources","resource_type","type","start_at","Object","prototype","toString","call","toUTCString","resources_by_tag","tag","resources_by_context","key","value","resources_by_moderation","kind","status","resource_by_asset_id","asset_id","resources_by_asset_folder","asset_folder","resources_by_asset_ids","asset_ids","resources_by_ids","public_ids","resource","public_id","restore","content_type","versions","update","updateable_resource_params","moderation_status","clear_invalid","delete_resources","delete_resources_by_prefix","prefix","delete_resources_by_tag","delete_all_resources","all","createRelationParams","publicIds","assets_to_relate","Array","isArray","deleteRelationParams","assets_to_unrelate","add_related_assets","publicId","assetsToRelate","add_related_assets_by_asset_id","assetId","delete_related_assets","assetsToUnrelate","delete_related_assets_by_asset_id","delete_derived_resources","derived_resource_ids","delete_derived_by_transformation","transformations","keep_original","build_eager","tags","transformation","transformationName","delete_transformation","update_transformation","updates","unsafe_update","create_transformation","name","definition","upload_presets","upload_preset","delete_upload_preset","update_upload_preset","merge","clear_blank","build_upload_params","create_upload_preset","root_folders","sub_folders","path","create_folder","delete_folder","rename_folder","old_path","new_path","rename_folder_params","to_folder","upload_mappings","upload_mapping","folder","delete_upload_mapping","update_upload_mapping","create_upload_mapping","publishResource","byKey","publish_by_prefix","publish_by_tag","publish_by_ids","list_streaming_profiles","get_streaming_profile","delete_streaming_profile","update_streaming_profile","build_streaming_profiles_param","create_streaming_profile","updateResourcesAccessMode","access_mode","by_key","search","visual_search","allowedParams","search_folders","update_resources_access_mode_by_prefix","update_resources_access_mode_by_tag","update_resources_access_mode_by_ids","ids","add_metadata_field","field","list_metadata_fields","delete_metadata_field","field_external_id","metadata_field_by_field_id","external_id","update_metadata_field","update_metadata_field_datasource","entries_external_id","delete_datasource_entries","external_ids","restore_metadata_field_datasource","order_metadata_field_datasource","sort_by","direction","order_by","reorder_metadata_fields","list_metadata_rules","add_metadata_rule","metadata_rule","update_metadata_rule","updated_metadata_rule","delete_metadata_rule","config"],"mappings":"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","sourcesContent":["const utils = require(\"./utils\");\nconst call_api = require(\"./api_client/call_api\");\n\nconst {\n  extend,\n  pickOnlyExistingValues\n} = utils;\n\nconst TRANSFORMATIONS_URI = \"transformations\";\n\nfunction deleteResourcesParams(options, params = {}) {\n  return extend(params, pickOnlyExistingValues(options, \"keep_original\", \"invalidate\", \"next_cursor\", \"transformations\"));\n}\n\nfunction getResourceParams(options) {\n  return pickOnlyExistingValues(options, \"exif\", \"cinemagraph_analysis\", \"colors\", \"derived_next_cursor\", \"faces\", \"image_metadata\", \"media_metadata\", \"pages\", \"phash\", \"coordinates\", \"max_results\", \"versions\", \"accessibility_analysis\", 'related', 'related_next_cursor');\n}\n\nexports.ping = function ping(callback, options = {}) {\n  return call_api(\"get\", [\"ping\"], {}, callback, options);\n};\n\nexports.usage = function usage(callback, options = {}) {\n  const uri = [\"usage\"];\n\n  if (options.date) {\n    uri.push(options.date);\n  }\n\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.resource_types = function resource_types(callback, options = {}) {\n  return call_api(\"get\", [\"resources\"], {}, callback, options);\n};\n\nexports.resources = function resources(callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type;\n  uri = [\"resources\", resource_type];\n  if (type != null) {\n    uri.push(type);\n  }\n  if ((options.start_at != null) && Object.prototype.toString.call(options.start_at) === '[object Date]') {\n    options.start_at = options.start_at.toUTCString();\n  }\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"prefix\", \"tags\", \"context\", \"direction\", \"moderations\", \"start_at\", \"metadata\", \"fields\"), callback, options);\n};\n\nexports.resources_by_tag = function resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\", \"metadata\", \"fields\"), callback, options);\n};\n\nexports.resources_by_context = function resources_by_context(key, value, callback, options = {}) {\n  let params, resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"context\"];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\", \"metadata\", \"fields\");\n  params.key = key;\n  if (value != null) {\n    params.value = value;\n  }\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_moderation = function resources_by_moderation(kind, status, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"moderations\", kind, status];\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"direction\", \"moderations\", \"metadata\", \"fields\"), callback, options);\n};\n\nexports.resource_by_asset_id = function resource_by_asset_id(asset_id, callback, options = {}) {\n  const uri = [\"resources\", asset_id];\n  return call_api(\"get\", uri, getResourceParams(options), callback, options);\n}\n\nexports.resources_by_asset_folder = function resources_by_asset_folder(asset_folder, callback, options = {}) {\n  let params, uri;\n  uri = [\"resources\", 'by_asset_folder'];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"tags\", \"context\", \"moderations\", \"fields\");\n  params.asset_folder = asset_folder;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resources_by_asset_ids = function resources_by_asset_ids(asset_ids, callback, options = {}) {\n  let params, uri;\n  uri = [\"resources\", \"by_asset_ids\"];\n  params = pickOnlyExistingValues(options, \"tags\", \"context\", \"moderations\", \"fields\");\n  params[\"asset_ids[]\"] = asset_ids;\n  return call_api(\"get\", uri, params, callback, options);\n}\n\nexports.resources_by_ids = function resources_by_ids(public_ids, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  params = pickOnlyExistingValues(options, \"tags\", \"context\", \"moderations\", \"fields\");\n  params[\"public_ids[]\"] = public_ids;\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.resource = function resource(public_id, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  return call_api(\"get\", uri, getResourceParams(options), callback, options);\n};\n\nexports.restore = function restore(public_ids, callback, options = {}) {\n  options.content_type = 'json';\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, \"restore\"];\n  return call_api(\"post\", uri, {\n    public_ids: public_ids,\n    versions: options.versions\n  }, callback, options);\n};\n\nexports.update = function update(public_id, callback, options = {}) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type, public_id];\n  params = utils.updateable_resource_params(options);\n  if (options.moderation_status != null) {\n    params.moderation_status = options.moderation_status;\n  }\n  if (options.clear_invalid != null) {\n    params.clear_invalid = options.clear_invalid;\n  }\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.delete_resources = function delete_resources(public_ids, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    \"public_ids[]\": public_ids\n  }), callback, options);\n};\n\nexports.delete_resources_by_prefix = function delete_resources_by_prefix(prefix, callback, options = {}) {\n  let resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    prefix: prefix\n  }), callback, options);\n};\n\nexports.delete_resources_by_tag = function delete_resources_by_tag(tag, callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"tags\", tag];\n  return call_api(\"delete\", uri, deleteResourcesParams(options), callback, options);\n};\n\nexports.delete_all_resources = function delete_all_resources(callback, options = {}) {\n  let resource_type, type, uri;\n\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = [\"resources\", resource_type, type];\n  return call_api(\"delete\", uri, deleteResourcesParams(options, {\n    all: true\n  }), callback, options);\n};\n\nconst createRelationParams = (publicIds = []) => {\n  return {\n    assets_to_relate: Array.isArray(publicIds) ? publicIds : [publicIds]\n  };\n};\n\nconst deleteRelationParams = (publicIds = []) => {\n  return {\n    assets_to_unrelate: Array.isArray(publicIds) ? publicIds : [publicIds]\n  };\n};\n\nexports.add_related_assets = (publicId, assetsToRelate, callback, options = {}) => {\n  const params = createRelationParams(assetsToRelate);\n  return call_api('post', ['resources', 'related_assets', options.resource_type, options.type, publicId], params, callback, options);\n};\n\nexports.add_related_assets_by_asset_id = (assetId, assetsToRelate, callback, options = {}) => {\n  const params = createRelationParams(assetsToRelate);\n  return call_api('post', ['resources', 'related_assets', assetId], params, callback, options);\n};\n\nexports.delete_related_assets = (publicId, assetsToUnrelate, callback, options = {}) => {\n  const params = deleteRelationParams(assetsToUnrelate);\n  return call_api('delete', ['resources', 'related_assets', options.resource_type, options.type, publicId], params, callback, options);\n};\n\nexports.delete_related_assets_by_asset_id = (assetId, assetsToUnrelate, callback, options = {}) => {\n  const params = deleteRelationParams(assetsToUnrelate);\n  return call_api('delete', ['resources', 'related_assets', assetId], params, callback, options);\n};\n\nexports.delete_derived_resources = function delete_derived_resources(derived_resource_ids, callback, options = {}) {\n  let uri;\n  uri = [\"derived_resources\"];\n  return call_api(\"delete\", uri, {\n    \"derived_resource_ids[]\": derived_resource_ids\n  }, callback, options);\n};\n\nexports.delete_derived_by_transformation = function delete_derived_by_transformation(\n  public_ids,\n  transformations,\n  callback,\n  options = {}\n) {\n  let params, resource_type, type, uri;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  uri = \"resources/\" + resource_type + \"/\" + type;\n  params = extend({\n    \"public_ids[]\": public_ids\n  }, pickOnlyExistingValues(options, \"invalidate\"));\n  params.keep_original = true;\n  params.transformations = utils.build_eager(transformations);\n  return call_api(\"delete\", uri, params, callback, options);\n};\n\nexports.tags = function tags(callback, options = {}) {\n  let resource_type, uri;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"tags\", resource_type];\n  return call_api(\"get\", uri, pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"prefix\"), callback, options);\n};\n\nexports.transformations = function transformations(callback, options = {}) {\n  const params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\", \"named\");\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.transformation = function transformation(transformationName, callback, options = {}) {\n  const params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"get\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.delete_transformation = function delete_transformation(transformationName, callback, options = {}) {\n  const params = {};\n  params.transformation = utils.build_eager(transformationName);\n  return call_api(\"delete\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.update_transformation = function update_transformation(transformationName, updates, callback, options = {}) {\n  const params = pickOnlyExistingValues(updates, \"allowed_for_strict\");\n  params.transformation = utils.build_eager(transformationName);\n  if (updates.unsafe_update != null) {\n    params.unsafe_update = utils.build_eager(updates.unsafe_update);\n  }\n  return call_api(\"put\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.create_transformation = function create_transformation(name, definition, callback, options = {}) {\n  const params = {name};\n  params.transformation = utils.build_eager(definition);\n  return call_api(\"post\", TRANSFORMATIONS_URI, params, callback, options);\n};\n\nexports.upload_presets = function upload_presets(callback, options = {}) {\n  return call_api(\"get\", [\"upload_presets\"], pickOnlyExistingValues(options, \"next_cursor\", \"max_results\"), callback, options);\n};\n\nexports.upload_preset = function upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"get\", uri, {}, callback, options);\n};\n\nexports.delete_upload_preset = function delete_upload_preset(name, callback, options = {}) {\n  let uri;\n  uri = [\"upload_presets\", name];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.update_upload_preset = function update_upload_preset(name, callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\", name];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), pickOnlyExistingValues(options, \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"put\", uri, params, callback, options);\n};\n\nexports.create_upload_preset = function create_upload_preset(callback, options = {}) {\n  let params, uri;\n  uri = [\"upload_presets\"];\n  params = utils.merge(utils.clear_blank(utils.build_upload_params(options)), pickOnlyExistingValues(options, \"name\", \"unsigned\", \"disallow_public_id\", \"live\"));\n  return call_api(\"post\", uri, params, callback, options);\n};\n\nexports.root_folders = function root_folders(callback, options = {}) {\n  let uri, params;\n  uri = [\"folders\"];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", uri, params, callback, options);\n};\n\nexports.sub_folders = function sub_folders(path, callback, options = {}) {\n  let uri, params;\n  uri = [\"folders\", path];\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", uri, params, callback, options);\n};\n\n/**\n * Creates an empty folder\n *\n * @param {string}    path      The folder path to create\n * @param {function}  callback  Callback function\n * @param {object}    options   Configuration options\n * @returns {*}\n */\nexports.create_folder = function create_folder(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"post\", uri, {}, callback, options);\n};\n\nexports.delete_folder = function delete_folder(path, callback, options = {}) {\n  let uri;\n  uri = [\"folders\", path];\n  return call_api(\"delete\", uri, {}, callback, options);\n};\n\nexports.rename_folder = function rename_folder(old_path, new_path, callback, options = {}) {\n  let uri;\n  uri = ['folders', old_path];\n  let rename_folder_params = {\n    to_folder: new_path\n  };\n  options.content_type = 'json';\n  return call_api('put', uri, rename_folder_params, callback, options);\n};\n\nexports.upload_mappings = function upload_mappings(callback, options = {}) {\n  let params;\n  params = pickOnlyExistingValues(options, \"next_cursor\", \"max_results\");\n  return call_api(\"get\", \"upload_mappings\", params, callback, options);\n};\n\nexports.upload_mapping = function upload_mapping(name, callback, options = {}) {\n  if (name == null) {\n    name = null;\n  }\n  return call_api(\"get\", 'upload_mappings', {\n    folder: name\n  }, callback, options);\n};\n\nexports.delete_upload_mapping = function delete_upload_mapping(name, callback, options = {}) {\n  return call_api(\"delete\", 'upload_mappings', {\n    folder: name\n  }, callback, options);\n};\n\nexports.update_upload_mapping = function update_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = pickOnlyExistingValues(options, \"template\");\n  params.folder = name;\n  return call_api(\"put\", 'upload_mappings', params, callback, options);\n};\n\nexports.create_upload_mapping = function create_upload_mapping(name, callback, options = {}) {\n  let params;\n  params = pickOnlyExistingValues(options, \"template\");\n  params.folder = name;\n  return call_api(\"post\", 'upload_mappings', params, callback, options);\n};\n\nfunction publishResource(byKey, value, callback, options = {}) {\n  let params, resource_type, uri;\n  params = pickOnlyExistingValues(options, \"type\", \"invalidate\", \"overwrite\");\n  params[byKey] = value;\n  resource_type = options.resource_type || \"image\";\n  uri = [\"resources\", resource_type, \"publish_resources\"];\n  options = extend({\n    resource_type: resource_type\n  }, options);\n  return call_api(\"post\", uri, params, callback, options);\n}\n\nexports.publish_by_prefix = function publish_by_prefix(prefix, callback, options = {}) {\n  return publishResource(\"prefix\", prefix, callback, options);\n};\n\nexports.publish_by_tag = function publish_by_tag(tag, callback, options = {}) {\n  return publishResource(\"tag\", tag, callback, options);\n};\n\nexports.publish_by_ids = function publish_by_ids(public_ids, callback, options = {}) {\n  return publishResource(\"public_ids\", public_ids, callback, options);\n};\n\nexports.list_streaming_profiles = function list_streaming_profiles(callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles\", {}, callback, options);\n};\n\nexports.get_streaming_profile = function get_streaming_profile(name, callback, options = {}) {\n  return call_api(\"get\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.delete_streaming_profile = function delete_streaming_profile(name, callback, options = {}) {\n  return call_api(\"delete\", \"streaming_profiles/\" + name, {}, callback, options);\n};\n\nexports.update_streaming_profile = function update_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  return call_api(\"put\", \"streaming_profiles/\" + name, params, callback, options);\n};\n\nexports.create_streaming_profile = function create_streaming_profile(name, callback, options = {}) {\n  let params;\n  params = utils.build_streaming_profiles_param(options);\n  params.name = name;\n  return call_api(\"post\", 'streaming_profiles', params, callback, options);\n};\n\nfunction updateResourcesAccessMode(access_mode, by_key, value, callback, options = {}) {\n  let params, resource_type, type;\n  resource_type = options.resource_type || \"image\";\n  type = options.type || \"upload\";\n  params = {\n    access_mode: access_mode\n  };\n  params[by_key] = value;\n  return call_api(\"post\", \"resources/\" + resource_type + \"/\" + type + \"/update_access_mode\", params, callback, options);\n}\n\nexports.search = function search(params, callback, options = {}) {\n  options.content_type = 'json';\n  return call_api(\"post\", \"resources/search\", params, callback, options);\n};\n\nexports.visual_search = function visual_search(params, callback, options = {}) {\n  const allowedParams = pickOnlyExistingValues(params, 'image_url', 'image_asset_id', 'text');\n  return call_api('get', ['resources', 'visual_search'], allowedParams, callback, options);\n};\n\nexports.search_folders = function search_folders(params, callback, options = {}) {\n  options.content_type = 'json';\n  return call_api(\"post\", \"folders/search\", params, callback, options);\n};\n\nexports.update_resources_access_mode_by_prefix = function update_resources_access_mode_by_prefix(\n  access_mode,\n  prefix,\n  callback,\n  options = {}\n) {\n  return updateResourcesAccessMode(access_mode, \"prefix\", prefix, callback, options);\n};\n\nexports.update_resources_access_mode_by_tag = function update_resources_access_mode_by_tag(\n  access_mode,\n  tag,\n  callback,\n  options = {}\n) {\n  return updateResourcesAccessMode(access_mode, \"tag\", tag, callback, options);\n};\n\nexports.update_resources_access_mode_by_ids = function update_resources_access_mode_by_ids(\n  access_mode,\n  ids,\n  callback,\n  options = {}\n) {\n  return updateResourcesAccessMode(access_mode, \"public_ids[]\", ids, callback, options);\n};\n\n/**\n * Creates a new metadata field definition\n *\n * @see https://cloudinary.com/documentation/admin_api#create_a_metadata_field\n *\n * @param {Object}   field    The field to add\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\nexports.add_metadata_field = function add_metadata_field(field, callback, options = {}) {\n  const params = pickOnlyExistingValues(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\", \"restrictions\");\n  options.content_type = \"json\";\n  return call_api(\"post\", [\"metadata_fields\"], params, callback, options);\n};\n\n/**\n * Returns a list of all metadata field definitions\n *\n * @see https://cloudinary.com/documentation/admin_api#get_metadata_fields\n *\n * @param {Function} callback Callback function\n * @param {Object}   options  Configuration options\n *\n * @return {Object}\n */\nexports.list_metadata_fields = function list_metadata_fields(callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\"], {}, callback, options);\n};\n\n/**\n * Deletes a metadata field definition.\n *\n * The field should no longer be considered a valid candidate for all other endpoints\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_a_metadata_field_by_external_id\n *\n * @param {String}   field_external_id  The external id of the field to delete\n * @param {Function} callback           Callback function\n * @param {Object}   options            Configuration options\n *\n * @return {Object}\n */\nexports.delete_metadata_field = function delete_metadata_field(field_external_id, callback, options = {}) {\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id], {}, callback, options);\n};\n\n/**\n * Get a metadata field by external id\n *\n * @see https://cloudinary.com/documentation/admin_api#get_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to retrieve\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\nexports.metadata_field_by_field_id = function metadata_field_by_field_id(external_id, callback, options = {}) {\n  return call_api(\"get\", [\"metadata_fields\", external_id], {}, callback, options);\n};\n\n/**\n * Updates a metadata field by external id\n *\n * Updates a metadata field definition (partially, no need to pass the entire object) passed as JSON data.\n * See {@link https://cloudinary.com/documentation/admin_api#generic_structure_of_a_metadata_field Generic structure of a metadata field} for details.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_by_external_id\n *\n * @param {String}   external_id  The ID of the metadata field to update\n * @param {Object}   field        Updated values of metadata field\n * @param {Function} callback     Callback function\n * @param {Object}   options      Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata_field = function update_metadata_field(external_id, field, callback, options = {}) {\n  const params = pickOnlyExistingValues(field, \"external_id\", \"type\", \"label\", \"mandatory\", \"default_value\", \"validation\", \"datasource\", \"restrictions\", \"default_disabled\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", external_id], params, callback, options);\n};\n\n/**\n * Updates a metadata field datasource\n *\n * Updates the datasource of a supported field type (currently only enum and set), passed as JSON data. The\n * update is partial: datasource entries with an existing external_id will be updated and entries with new\n * external_id’s (or without external_id’s) will be appended.\n *\n * @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the field to update\n * @param {Object}   entries_external_id  Updated values for datasource\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata_field_datasource = function update_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  const params = pickOnlyExistingValues(entries_external_id, \"values\");\n  options.content_type = \"json\";\n  return call_api(\"put\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n\n/**\n * Deletes entries in a metadata field datasource\n *\n * Deletes (blocks) the datasource entries for a specified metadata field definition. Sets the state of the\n * entries to inactive. This is a soft delete, the entries still exist under the hood and can be activated again\n * with the restore datasource entries method.\n *\n * @see https://cloudinary.com/documentation/admin_api#delete_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.delete_datasource_entries = function delete_datasource_entries(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {external_ids: entries_external_id};\n  return call_api(\"delete\", [\"metadata_fields\", field_external_id, \"datasource\"], params, callback, options);\n};\n\n/**\n * Restores entries in a metadata field datasource\n *\n * Restores (unblocks) any previously deleted datasource entries for a specified metadata field definition.\n * Sets the state of the entries to active.\n *\n * @see https://cloudinary.com/documentation/admin_api#restore_entries_in_a_metadata_field_datasource\n *\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {Array}    entries_external_id  An array of IDs of datasource entries to delete\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.restore_metadata_field_datasource = function restore_metadata_field_datasource(field_external_id, entries_external_id, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {external_ids: entries_external_id};\n  return call_api(\"post\", [\"metadata_fields\", field_external_id, \"datasource_restore\"], params, callback, options);\n};\n\n/**\n * Sorts metadata field datasource. Currently supports only value\n * @param {String}   field_external_id    The ID of the metadata field\n * @param {String}   sort_by              Criteria for the sort. Currently supports only value\n * @param {String}   direction            Optional (gets either asc or desc)\n * @param {Function} callback             Callback function\n * @param {Object}   options              Configuration options\n *\n * @return {Object}\n */\nexports.order_metadata_field_datasource = function order_metadata_field_datasource(field_external_id, sort_by, direction, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    order_by: sort_by,\n    direction: direction\n  };\n  return call_api(\"post\", [\"metadata_fields\", field_external_id, \"datasource\", \"order\"], params, callback, options);\n};\n\n/**\n * Reorders metadata fields.\n *\n * @param {String}   order_by  Criteria for the order (one of the fields 'label', 'external_id', 'created_at').\n * @param {String}   direction Optional (gets either asc or desc).\n * @param {Function} callback  Callback function.\n * @param {Object}   options   Configuration options.\n *\n * @return {Object}\n */\nexports.reorder_metadata_fields = function reorder_metadata_fields(order_by, direction, callback, options = {}) {\n  options.content_type = \"json\";\n  const params = {\n    order_by,\n    direction\n  };\n  return call_api(\"put\", [\"metadata_fields\", \"order\"], params, callback, options);\n};\n\nexports.list_metadata_rules = function list_metadata_rules(callback, options = {}) {\n  return call_api('get', ['metadata_rules'], {}, callback, options);\n};\n\nexports.add_metadata_rule = function add_metadata_rule(metadata_rule, callback, options = {}) {\n  options.content_type = 'json';\n  const params = pickOnlyExistingValues(metadata_rule, 'metadata_field_id', 'condition', 'result', 'name');\n  return call_api('post', ['metadata_rules'], params, callback, options);\n};\n\nexports.update_metadata_rule = function update_metadata_rule(field_external_id, updated_metadata_rule, callback, options = {}) {\n  options.content_type = 'json';\n  const params = pickOnlyExistingValues(updated_metadata_rule, 'metadata_field_id', 'condition', 'result', 'name', 'state');\n  return call_api('put', ['metadata_rules', field_external_id], params, callback, options);\n};\n\nexports.delete_metadata_rule = function delete_metadata_rule(field_external_id, callback, options = {}) {\n  return call_api('delete', ['metadata_rules', field_external_id], {}, callback, options);\n};\n\nexports.config = function config(callback, options = {}) {\n  const params = pickOnlyExistingValues(options, 'settings');\n  return call_api('get', ['config'], params, callback, options);\n}\n"]},"metadata":{},"sourceType":"script"}