{"ast":null,"code":"const stringPad = require('./stringPad');\n/**\n * @description A semVer like string, x.y.z or x.y is allowed\n *              Reverses the version positions, x.y.z turns to z.y.x\n *              Pads each segment with '0' so they have length of 2\n *              Example: 1.2.3 -> 03.02.01\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of zz.yy.xx (\n */\n\n\nmodule.exports = semVer => {\n  if (semVer.split('.').length < 2) {\n    throw new Error('invalid semVer, must have at least two segments');\n  } // Split by '.', reverse, create new array with padded values and concat it together\n\n\n  return semVer.split('.').reverse().map(segment => {\n    return stringPad(segment, 2, '0');\n  }).join('.');\n};","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/analytics/reverseVersion.js"],"names":["stringPad","require","module","exports","semVer","split","length","Error","reverse","map","segment","join"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;AAC3B,MAAIA,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD,GAH0B,CAK3B;;;AACA,SAAOH,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkBG,OAAlB,GAA4BC,GAA5B,CAAiCC,OAAD,IAAa;AAClD,WAAOV,SAAS,CAACU,OAAD,EAAU,CAAV,EAAa,GAAb,CAAhB;AACD,GAFM,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGD,CATD","sourcesContent":["const stringPad = require('./stringPad');\n\n/**\n * @description A semVer like string, x.y.z or x.y is allowed\n *              Reverses the version positions, x.y.z turns to z.y.x\n *              Pads each segment with '0' so they have length of 2\n *              Example: 1.2.3 -> 03.02.01\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of zz.yy.xx (\n */\nmodule.exports = (semVer) => {\n  if (semVer.split('.').length < 2) {\n    throw new Error('invalid semVer, must have at least two segments');\n  }\n\n  // Split by '.', reverse, create new array with padded values and concat it together\n  return semVer.split('.').reverse().map((segment) => {\n    return stringPad(segment, 2, '0');\n  }).join('.');\n};\n"]},"metadata":{},"sourceType":"script"}