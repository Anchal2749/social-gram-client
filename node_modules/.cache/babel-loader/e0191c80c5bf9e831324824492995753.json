{"ast":null,"code":"const reverseVersion = require('./reverseVersion');\n\nconst stringPad = require('./stringPad');\n\nconst base64Map = require('../encoding/base64Map');\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\n\n\nmodule.exports = semVer => {\n  let strResult = ''; // support x.y or x.y.z by using 'parts' as a variable\n\n  let parts = semVer.split('.').length;\n  let paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n  // Pad to two spaces, 15.5.1 -> 15.05.01\n\n  let paddedReversedSemver = reverseVersion(semVer); // turn 15.05.01 to a string '150501' then to a number 150501\n\n  let num = parseInt(paddedReversedSemver.split('.').join('')); // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0'); // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  } // turn every 6 bits into a character using the base64Map\n\n\n  paddedBinary.match(/.{1,6}/g).forEach(bitString => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n  return strResult;\n};","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/analytics/encodeVersion.js"],"names":["reverseVersion","require","stringPad","base64Map","module","exports","semVer","strResult","parts","split","length","paddedStringLength","paddedReversedSemver","num","parseInt","join","paddedBinary","toString","match","forEach","bitString"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,uBAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;AAC3B,MAAIC,SAAS,GAAG,EAAhB,CAD2B,CAG3B;;AACA,MAAIC,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBC,MAA9B;AACA,MAAIC,kBAAkB,GAAGH,KAAK,GAAG,CAAjC,CAL2B,CAKS;AAEpC;AACA;;AACA,MAAII,oBAAoB,GAAGZ,cAAc,CAACM,MAAD,CAAzC,CAT2B,CAW3B;;AACA,MAAIO,GAAG,GAAGC,QAAQ,CAACF,oBAAoB,CAACH,KAArB,CAA2B,GAA3B,EAAgCM,IAAhC,CAAqC,EAArC,CAAD,CAAlB,CAZ2B,CAc3B;AACA;;AAEA,MAAIC,YAAY,GAAGH,GAAG,CAACI,QAAJ,CAAa,CAAb,CAAnB;AACAD,EAAAA,YAAY,GAAGd,SAAS,CAACc,YAAD,EAAeL,kBAAf,EAAmC,GAAnC,CAAxB,CAlB2B,CAoB3B;AACA;;AACA,MAAIK,YAAY,CAACN,MAAb,GAAsB,CAAtB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,wCAAN;AACD,GAxB0B,CA0B3B;;;AACAM,EAAAA,YAAY,CAACE,KAAb,CAAmB,SAAnB,EAA8BC,OAA9B,CAAuCC,SAAD,IAAe;AACnD;AACAb,IAAAA,SAAS,IAAIJ,SAAS,CAACiB,SAAD,CAAtB;AACD,GAHD;AAKA,SAAOb,SAAP;AACD,CAjCD","sourcesContent":["const reverseVersion = require('./reverseVersion');\nconst stringPad = require('./stringPad');\nconst base64Map = require('../encoding/base64Map');\n\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nmodule.exports = (semVer) => {\n  let strResult = '';\n\n  // support x.y or x.y.z by using 'parts' as a variable\n  let parts = semVer.split('.').length;\n  let paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n  // Pad to two spaces, 15.5.1 -> 15.05.01\n  let paddedReversedSemver = reverseVersion(semVer);\n\n  // turn 15.05.01 to a string '150501' then to a number 150501\n  let num = parseInt(paddedReversedSemver.split('.').join(''));\n\n  // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n\n  // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  }\n\n  // turn every 6 bits into a character using the base64Map\n  paddedBinary.match(/.{1,6}/g).forEach((bitString) => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n\n  return strResult;\n};\n"]},"metadata":{},"sourceType":"script"}