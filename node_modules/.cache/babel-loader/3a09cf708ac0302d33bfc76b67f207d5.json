{"ast":null,"code":"import{GLOBALTYPES,EditData,DeleteData}from\"./globalTypes\";import{POST_TYPES}from\"./postAction\";import{createNotify,removeNotify}from\"./notifyAction\";import{postDataAPI,patchDataAPI,deleteDataAPI}from\"../../utils/fetchData\";export const createComment=_ref=>{let{post,newComment,auth,socket}=_ref;return async dispatch=>{const newPost={...post,comments:[...post.comments,newComment]};dispatch({type:POST_TYPES.UPDATE_POST,payload:newPost});try{const data={...newComment,postId:post._id,postUserId:post.user._id};const res=await postDataAPI(\"comment\",data,auth.token);const newData={...res.data.newComment,user:auth.user};const newPost={...post,comments:[...post.comments,newData]};dispatch({type:POST_TYPES.UPDATE_POST,payload:newPost});// todo socket\nsocket.emit(\"createComment\",newPost);// todo notification\nconst msg={id:res.data.newComment._id,text:newComment.reply?\"mentioned you in a comment.\":\"commented on your post.\",recipients:newComment.reply?[newComment.tag._id]:[post.user._id],url:`/post/${post._id}`,content:newComment.reply?newComment.content:post.content,image:post.images[0].url};dispatch(createNotify({msg,auth,socket}));}catch(err){dispatch({type:GLOBALTYPES.ALERT,payload:{error:err.response.data.msg}});}};};export const updateComment=_ref2=>{let{comment,post,content,auth}=_ref2;return async dispatch=>{const newComments=EditData(post.comments,comment._id,{...comment,content});const newPost={...post,comments:newComments};dispatch({type:POST_TYPES.UPDATE_POST,payload:newPost});try{await patchDataAPI(`comment/${comment._id}`,{content},auth.token);}catch(err){dispatch({type:GLOBALTYPES.ALERT,payload:{error:err.response.data.msg}});}};};export const likeComment=_ref3=>{let{comment,post,auth}=_ref3;return async dispatch=>{const newComment={...comment,likes:[...comment.likes,auth.user]};const newComments=EditData(post.comments,comment._id,newComment);const newPost={...post,comments:newComments};dispatch({type:POST_TYPES.UPDATE_POST,payload:newPost});try{await patchDataAPI(`comment/${comment._id}/like`,null,auth.token);}catch(err){dispatch({type:GLOBALTYPES.ALERT,payload:{error:err.response.data.msg}});}};};export const unLikeComment=_ref4=>{let{comment,post,auth}=_ref4;return async dispatch=>{const newComment={...comment,likes:DeleteData(comment.likes,auth.user._id)};const newComments=EditData(post.comments,comment._id,newComment);const newPost={...post,comments:newComments};dispatch({type:POST_TYPES.UPDATE_POST,payload:newPost});try{await patchDataAPI(`comment/${comment._id}/unlike`,null,auth.token);}catch(err){dispatch({type:GLOBALTYPES.ALERT,payload:{error:err.response.data.msg}});}};};export const deleteComment=_ref5=>{let{post,comment,auth,socket}=_ref5;return async dispatch=>{const deleteArr=[...post.comments.filter(cm=>cm.reply===comment._id),comment];const newPost={...post,comments:post.comments.filter(cm=>!deleteArr.find(da=>cm._id===da._id))};dispatch({type:POST_TYPES.UPDATE_POST,payload:newPost});socket.emit('deleteComment',newPost);try{deleteArr.forEach(item=>{deleteDataAPI(`comment/${item._id}`,auth.token);// todo notification\nconst msg={id:item._id,text:item.reply?\"mentioned you in a comment.\":\"commented on your post.\",recipients:item.reply?[item.tag._id]:[post.user._id],url:`/post/${post._id}`};dispatch(removeNotify({msg,auth,socket}));});}catch(err){dispatch({type:GLOBALTYPES.ALERT,payload:{error:err.response.data.msg}});}};};","map":{"version":3,"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","createNotify","removeNotify","postDataAPI","patchDataAPI","deleteDataAPI","createComment","_ref","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","_ref2","comment","newComments","likeComment","_ref3","likes","unLikeComment","_ref4","deleteComment","_ref5","deleteArr","filter","cm","find","da","forEach","item"],"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/src/redux/actions/commentAction.js"],"sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\r\nimport { POST_TYPES } from \"./postAction\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\n\r\n\r\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\r\n    const newPost = {...post, comments: [...post.comments, newComment]};\r\n    \r\n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n      // todo socket\r\n      socket.emit(\"createComment\", newPost);\r\n\r\n      // todo notification\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? \"mentioned you in a comment.\"\r\n          : \"commented on your post.\",\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: newComment.reply\r\n          ? newComment.content\r\n          : post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\r\n    }\r\n};\r\n\r\n\r\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\r\n  const newComments = EditData(post.comments, comment._id, {...comment, content});\r\n  const newPost = {...post, comments: newComments};\r\n  \r\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n\r\n  try {\r\n    await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n\r\n  } catch (err) {\r\n    dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\r\n  }\r\n};\r\n\r\nexport const likeComment= ({comment, post, auth}) => async (dispatch) => {\r\n    const newComment = {...comment, likes: [...comment.likes, auth.user]};\r\n     const newComments = EditData(post.comments, comment._id, newComment);\r\n     const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n    try {\r\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\r\n\r\n    }\r\n};\r\n\r\nexport const unLikeComment = ({ comment, post, auth }) => async (dispatch) => {\r\n  const newComment = { ...comment, likes: DeleteData(comment.likes, auth.user._id) };\r\n  const newComments = EditData(post.comments, comment._id, newComment);\r\n  const newPost = { ...post, comments: newComments };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  try {\r\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const deleteComment = ({ post, comment, auth, socket }) => async (dispatch) => {\r\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\r\n\r\n  const newPost = {\r\n    ...post,\r\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\r\n  }\r\n\r\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n\r\n  socket.emit('deleteComment', newPost);\r\n\r\n  try {\r\n    deleteArr.forEach(item => {\r\n      deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n      // todo notification\r\n      const msg = {\r\n        id: item._id,\r\n        text: item.reply\r\n          ? \"mentioned you in a comment.\"\r\n          : \"commented on your post.\",\r\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n      };\r\n\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}