{"ast":null,"code":"const removePatchFromSemver = require('./removePatchFromSemver');\nconst encodeVersion = require('./encodeVersion');\n\n/**\n * @description Gets the SDK signature by encoding the SDK version and tech version\n * @param {{\n *    [techVersion]:string,\n *    [sdkSemver]: string,\n *    [sdkCode]: string,\n *    [product]: string,\n *    [feature]: string\n * }} analyticsOptions\n * @return {string} sdkAnalyticsSignature\n */\nfunction getSDKAnalyticsSignature() {\n  let analyticsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  try {\n    const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n    const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n    const encodedTechVersion = encodeVersion(twoPartVersion);\n    const featureCode = analyticsOptions.feature;\n    const SDKCode = analyticsOptions.sdkCode;\n    const product = analyticsOptions.product;\n    const algoVersion = 'B'; // The algo version is determined here, it should not be an argument\n\n    return `${algoVersion}${product}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n  } catch (e) {\n    // Either SDK or Node versions were unparsable\n    return 'E';\n  }\n}\n\n/**\n * @description Gets the analyticsOptions from options - should include sdkSemver, techVersion, sdkCode, and feature\n * @param options\n * @returns {{sdkSemver: (string), sdkCode, product, feature: string, techVersion: (string)} || {}}\n */\nfunction getAnalyticsOptions(options) {\n  let analyticsOptions = {\n    sdkSemver: options.sdkSemver,\n    techVersion: options.techVersion,\n    sdkCode: options.sdkCode,\n    product: options.product,\n    feature: '0'\n  };\n  if (options.urlAnalytics) {\n    if (options.accessibility) {\n      analyticsOptions.feature = 'D';\n    }\n    if (options.loading === 'lazy') {\n      analyticsOptions.feature = 'C';\n    }\n    if (options.responsive) {\n      analyticsOptions.feature = 'A';\n    }\n    if (options.placeholder) {\n      analyticsOptions.feature = 'B';\n    }\n    return analyticsOptions;\n  } else {\n    return {};\n  }\n}\nmodule.exports = {\n  getSDKAnalyticsSignature,\n  getAnalyticsOptions\n};","map":{"version":3,"names":["removePatchFromSemver","require","encodeVersion","getSDKAnalyticsSignature","analyticsOptions","arguments","length","undefined","twoPartVersion","techVersion","encodedSDKVersion","sdkSemver","encodedTechVersion","featureCode","feature","SDKCode","sdkCode","product","algoVersion","e","getAnalyticsOptions","options","urlAnalytics","accessibility","loading","responsive","placeholder","module","exports"],"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/analytics/index.js"],"sourcesContent":["const removePatchFromSemver = require('./removePatchFromSemver');\nconst encodeVersion = require('./encodeVersion');\n\n/**\n * @description Gets the SDK signature by encoding the SDK version and tech version\n * @param {{\n *    [techVersion]:string,\n *    [sdkSemver]: string,\n *    [sdkCode]: string,\n *    [product]: string,\n *    [feature]: string\n * }} analyticsOptions\n * @return {string} sdkAnalyticsSignature\n */\nfunction getSDKAnalyticsSignature(analyticsOptions = {}) {\n  try {\n    const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n    const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n    const encodedTechVersion = encodeVersion(twoPartVersion);\n    const featureCode = analyticsOptions.feature;\n    const SDKCode = analyticsOptions.sdkCode;\n    const product = analyticsOptions.product;\n    const algoVersion = 'B'; // The algo version is determined here, it should not be an argument\n\n    return `${algoVersion}${product}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n  } catch (e) {\n    // Either SDK or Node versions were unparsable\n    return 'E';\n  }\n}\n\n/**\n * @description Gets the analyticsOptions from options - should include sdkSemver, techVersion, sdkCode, and feature\n * @param options\n * @returns {{sdkSemver: (string), sdkCode, product, feature: string, techVersion: (string)} || {}}\n */\nfunction getAnalyticsOptions(options) {\n  let analyticsOptions = {\n    sdkSemver: options.sdkSemver,\n    techVersion: options.techVersion,\n    sdkCode: options.sdkCode,\n    product: options.product,\n    feature: '0'\n  };\n  if (options.urlAnalytics) {\n    if (options.accessibility) {\n      analyticsOptions.feature = 'D';\n    }\n    if (options.loading === 'lazy') {\n      analyticsOptions.feature = 'C';\n    }\n    if (options.responsive) {\n      analyticsOptions.feature = 'A';\n    }\n    if (options.placeholder) {\n      analyticsOptions.feature = 'B';\n    }\n    return analyticsOptions;\n  } else {\n    return {};\n  }\n}\n\nmodule.exports = {\n  getSDKAnalyticsSignature,\n  getAnalyticsOptions\n};\n"],"mappings":"AAAA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAChE,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,wBAAwBA,CAAA,EAAwB;EAAA,IAAvBC,gBAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACrD,IAAI;IACF,MAAMG,cAAc,GAAGR,qBAAqB,CAACI,gBAAgB,CAACK,WAAW,CAAC;IAC1E,MAAMC,iBAAiB,GAAGR,aAAa,CAACE,gBAAgB,CAACO,SAAS,CAAC;IACnE,MAAMC,kBAAkB,GAAGV,aAAa,CAACM,cAAc,CAAC;IACxD,MAAMK,WAAW,GAAGT,gBAAgB,CAACU,OAAO;IAC5C,MAAMC,OAAO,GAAGX,gBAAgB,CAACY,OAAO;IACxC,MAAMC,OAAO,GAAGb,gBAAgB,CAACa,OAAO;IACxC,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;;IAEzB,OAAO,GAAGA,WAAW,GAAGD,OAAO,GAAGF,OAAO,GAAGL,iBAAiB,GAAGE,kBAAkB,GAAGC,WAAW,EAAE;EACpG,CAAC,CAAC,OAAOM,CAAC,EAAE;IACV;IACA,OAAO,GAAG;EACZ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,OAAO,EAAE;EACpC,IAAIjB,gBAAgB,GAAG;IACrBO,SAAS,EAAEU,OAAO,CAACV,SAAS;IAC5BF,WAAW,EAAEY,OAAO,CAACZ,WAAW;IAChCO,OAAO,EAAEK,OAAO,CAACL,OAAO;IACxBC,OAAO,EAAEI,OAAO,CAACJ,OAAO;IACxBH,OAAO,EAAE;EACX,CAAC;EACD,IAAIO,OAAO,CAACC,YAAY,EAAE;IACxB,IAAID,OAAO,CAACE,aAAa,EAAE;MACzBnB,gBAAgB,CAACU,OAAO,GAAG,GAAG;IAChC;IACA,IAAIO,OAAO,CAACG,OAAO,KAAK,MAAM,EAAE;MAC9BpB,gBAAgB,CAACU,OAAO,GAAG,GAAG;IAChC;IACA,IAAIO,OAAO,CAACI,UAAU,EAAE;MACtBrB,gBAAgB,CAACU,OAAO,GAAG,GAAG;IAChC;IACA,IAAIO,OAAO,CAACK,WAAW,EAAE;MACvBtB,gBAAgB,CAACU,OAAO,GAAG,GAAG;IAChC;IACA,OAAOV,gBAAgB;EACzB,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF;AAEAuB,MAAM,CAACC,OAAO,GAAG;EACfzB,wBAAwB;EACxBiB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}