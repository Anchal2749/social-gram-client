{"ast":null,"code":"const removePatchFromSemver = require('./removePatchFromSemver');\n\nconst encodeVersion = require('./encodeVersion');\n/**\n * @description Gets the SDK signature by encoding the SDK version and tech version\n * @param {{\n *    [techVersion]:string,\n *    [sdkSemver]: string,\n *    [sdkCode]: string,\n *    [product]: string,\n *    [feature]: string\n * }} analyticsOptions\n * @return {string} sdkAnalyticsSignature\n */\n\n\nfunction getSDKAnalyticsSignature(analyticsOptions = {}) {\n  try {\n    const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n    const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n    const encodedTechVersion = encodeVersion(twoPartVersion);\n    const featureCode = analyticsOptions.feature;\n    const SDKCode = analyticsOptions.sdkCode;\n    const product = analyticsOptions.product;\n    const algoVersion = 'B'; // The algo version is determined here, it should not be an argument\n\n    return `${algoVersion}${product}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n  } catch (e) {\n    // Either SDK or Node versions were unparsable\n    return 'E';\n  }\n}\n/**\n * @description Gets the analyticsOptions from options - should include sdkSemver, techVersion, sdkCode, and feature\n * @param options\n * @returns {{sdkSemver: (string), sdkCode, product, feature: string, techVersion: (string)} || {}}\n */\n\n\nfunction getAnalyticsOptions(options) {\n  let analyticsOptions = {\n    sdkSemver: options.sdkSemver,\n    techVersion: options.techVersion,\n    sdkCode: options.sdkCode,\n    product: options.product,\n    feature: '0'\n  };\n\n  if (options.urlAnalytics) {\n    if (options.accessibility) {\n      analyticsOptions.feature = 'D';\n    }\n\n    if (options.loading === 'lazy') {\n      analyticsOptions.feature = 'C';\n    }\n\n    if (options.responsive) {\n      analyticsOptions.feature = 'A';\n    }\n\n    if (options.placeholder) {\n      analyticsOptions.feature = 'B';\n    }\n\n    return analyticsOptions;\n  } else {\n    return {};\n  }\n}\n\nmodule.exports = {\n  getSDKAnalyticsSignature,\n  getAnalyticsOptions\n};","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/analytics/index.js"],"names":["removePatchFromSemver","require","encodeVersion","getSDKAnalyticsSignature","analyticsOptions","twoPartVersion","techVersion","encodedSDKVersion","sdkSemver","encodedTechVersion","featureCode","feature","SDKCode","sdkCode","product","algoVersion","e","getAnalyticsOptions","options","urlAnalytics","accessibility","loading","responsive","placeholder","module","exports"],"mappings":"AAAA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,wBAAT,CAAkCC,gBAAgB,GAAG,EAArD,EAAyD;AACvD,MAAI;AACF,UAAMC,cAAc,GAAGL,qBAAqB,CAACI,gBAAgB,CAACE,WAAlB,CAA5C;AACA,UAAMC,iBAAiB,GAAGL,aAAa,CAACE,gBAAgB,CAACI,SAAlB,CAAvC;AACA,UAAMC,kBAAkB,GAAGP,aAAa,CAACG,cAAD,CAAxC;AACA,UAAMK,WAAW,GAAGN,gBAAgB,CAACO,OAArC;AACA,UAAMC,OAAO,GAAGR,gBAAgB,CAACS,OAAjC;AACA,UAAMC,OAAO,GAAGV,gBAAgB,CAACU,OAAjC;AACA,UAAMC,WAAW,GAAG,GAApB,CAPE,CAOuB;;AAEzB,WAAQ,GAAEA,WAAY,GAAED,OAAQ,GAAEF,OAAQ,GAAEL,iBAAkB,GAAEE,kBAAmB,GAAEC,WAAY,EAAjG;AACD,GAVD,CAUE,OAAOM,CAAP,EAAU;AACV;AACA,WAAO,GAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,MAAId,gBAAgB,GAAG;AACrBI,IAAAA,SAAS,EAAEU,OAAO,CAACV,SADE;AAErBF,IAAAA,WAAW,EAAEY,OAAO,CAACZ,WAFA;AAGrBO,IAAAA,OAAO,EAAEK,OAAO,CAACL,OAHI;AAIrBC,IAAAA,OAAO,EAAEI,OAAO,CAACJ,OAJI;AAKrBH,IAAAA,OAAO,EAAE;AALY,GAAvB;;AAOA,MAAIO,OAAO,CAACC,YAAZ,EAA0B;AACxB,QAAID,OAAO,CAACE,aAAZ,EAA2B;AACzBhB,MAAAA,gBAAgB,CAACO,OAAjB,GAA2B,GAA3B;AACD;;AACD,QAAIO,OAAO,CAACG,OAAR,KAAoB,MAAxB,EAAgC;AAC9BjB,MAAAA,gBAAgB,CAACO,OAAjB,GAA2B,GAA3B;AACD;;AACD,QAAIO,OAAO,CAACI,UAAZ,EAAwB;AACtBlB,MAAAA,gBAAgB,CAACO,OAAjB,GAA2B,GAA3B;AACD;;AACD,QAAIO,OAAO,CAACK,WAAZ,EAAyB;AACvBnB,MAAAA,gBAAgB,CAACO,OAAjB,GAA2B,GAA3B;AACD;;AACD,WAAOP,gBAAP;AACD,GAdD,MAcO;AACL,WAAO,EAAP;AACD;AACF;;AAEDoB,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,wBADe;AAEfc,EAAAA;AAFe,CAAjB","sourcesContent":["const removePatchFromSemver = require('./removePatchFromSemver');\nconst encodeVersion = require('./encodeVersion');\n\n/**\n * @description Gets the SDK signature by encoding the SDK version and tech version\n * @param {{\n *    [techVersion]:string,\n *    [sdkSemver]: string,\n *    [sdkCode]: string,\n *    [product]: string,\n *    [feature]: string\n * }} analyticsOptions\n * @return {string} sdkAnalyticsSignature\n */\nfunction getSDKAnalyticsSignature(analyticsOptions = {}) {\n  try {\n    const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n    const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n    const encodedTechVersion = encodeVersion(twoPartVersion);\n    const featureCode = analyticsOptions.feature;\n    const SDKCode = analyticsOptions.sdkCode;\n    const product = analyticsOptions.product;\n    const algoVersion = 'B'; // The algo version is determined here, it should not be an argument\n\n    return `${algoVersion}${product}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n  } catch (e) {\n    // Either SDK or Node versions were unparsable\n    return 'E';\n  }\n}\n\n/**\n * @description Gets the analyticsOptions from options - should include sdkSemver, techVersion, sdkCode, and feature\n * @param options\n * @returns {{sdkSemver: (string), sdkCode, product, feature: string, techVersion: (string)} || {}}\n */\nfunction getAnalyticsOptions(options) {\n  let analyticsOptions = {\n    sdkSemver: options.sdkSemver,\n    techVersion: options.techVersion,\n    sdkCode: options.sdkCode,\n    product: options.product,\n    feature: '0'\n  };\n  if (options.urlAnalytics) {\n    if (options.accessibility) {\n      analyticsOptions.feature = 'D';\n    }\n    if (options.loading === 'lazy') {\n      analyticsOptions.feature = 'C';\n    }\n    if (options.responsive) {\n      analyticsOptions.feature = 'A';\n    }\n    if (options.placeholder) {\n      analyticsOptions.feature = 'B';\n    }\n    return analyticsOptions;\n  } else {\n    return {};\n  }\n}\n\nmodule.exports = {\n  getSDKAnalyticsSignature,\n  getAnalyticsOptions\n};\n"]},"metadata":{},"sourceType":"script"}