{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst sdkCode = 'M'; // Constant per SDK\n\nfunction readSdkSemver() {\n  const pkgJsonPath = path.join(__dirname, '../../../package.json');\n\n  try {\n    const pkgJSONFile = fs.readFileSync(pkgJsonPath, 'utf-8');\n    return JSON.parse(pkgJSONFile).version;\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return '0.0.0';\n    }\n\n    return 'n/a';\n  }\n}\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\n\n\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  // allow to pass a custom SDKVersion\n  const sdkSemver = useSDKVersion === 'default' ? readSdkSemver() : useSDKVersion; // allow to pass a custom techVersion (Node version)\n\n  const techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n  const product = 'A';\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode,\n    product\n  };\n}\n\nmodule.exports = getSDKVersions;","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/analytics/getSDKVersions.js"],"names":["fs","require","path","sdkCode","readSdkSemver","pkgJsonPath","join","__dirname","pkgJSONFile","readFileSync","JSON","parse","version","e","code","getSDKVersions","useSDKVersion","useNodeVersion","sdkSemver","techVersion","process","versions","node","product","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,OAAO,GAAG,GAAhB,C,CAAqB;;AAErB,SAASC,aAAT,GAAyB;AACvB,QAAMC,WAAW,GAAGH,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,uBAArB,CAApB;;AACA,MAAI;AACF,UAAMC,WAAW,GAAGR,EAAE,CAACS,YAAH,CAAgBJ,WAAhB,EAA6B,OAA7B,CAApB;AACA,WAAOK,IAAI,CAACC,KAAL,CAAWH,WAAX,EAAwBI,OAA/B;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,QAAIA,CAAC,CAACC,IAAF,KAAW,QAAf,EAAyB;AACvB,aAAO,OAAP;AACD;;AACD,WAAO,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,aAAa,GAAG,SAAxC,EAAmDC,cAAc,GAAG,SAApE,EAA+E;AAC7E;AACA,QAAMC,SAAS,GAAGF,aAAa,KAAK,SAAlB,GAA8BZ,aAAa,EAA3C,GAAgDY,aAAlE,CAF6E,CAI7E;;AACA,QAAMG,WAAW,GAAGF,cAAc,KAAK,SAAnB,GAA+BG,OAAO,CAACC,QAAR,CAAiBC,IAAhD,GAAuDL,cAA3E;AAEA,QAAMM,OAAO,GAAG,GAAhB;AAEA,SAAO;AACLL,IAAAA,SADK;AAELC,IAAAA,WAFK;AAGLhB,IAAAA,OAHK;AAILoB,IAAAA;AAJK,GAAP;AAMD;;AAEDC,MAAM,CAACC,OAAP,GAAiBV,cAAjB","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst sdkCode = 'M'; // Constant per SDK\n\nfunction readSdkSemver() {\n  const pkgJsonPath = path.join(__dirname, '../../../package.json');\n  try {\n    const pkgJSONFile = fs.readFileSync(pkgJsonPath, 'utf-8');\n    return JSON.parse(pkgJSONFile).version\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return '0.0.0'\n    }\n    return 'n/a';\n  }\n}\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  // allow to pass a custom SDKVersion\n  const sdkSemver = useSDKVersion === 'default' ? readSdkSemver() : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  const techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n\n  const product = 'A';\n\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode,\n    product\n  };\n}\n\nmodule.exports = getSDKVersions;\n"]},"metadata":{},"sourceType":"script"}