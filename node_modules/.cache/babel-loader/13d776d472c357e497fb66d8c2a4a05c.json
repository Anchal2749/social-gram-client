{"ast":null,"code":"/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\nconst crypto = require(\"crypto\");\n\nconst querystring = require(\"querystring\");\n\nconst urlParse = require(\"url\").parse; // Functions used internally\n\n\nconst compact = require(\"lodash/compact\");\n\nconst first = require(\"lodash/first\");\n\nconst isFunction = require(\"lodash/isFunction\");\n\nconst isPlainObject = require(\"lodash/isPlainObject\");\n\nconst last = require(\"lodash/last\");\n\nconst map = require(\"lodash/map\");\n\nconst take = require(\"lodash/take\");\n\nconst at = require(\"lodash/at\"); // Exposed by the module\n\n\nconst clone = require(\"lodash/clone\");\n\nconst extend = require(\"lodash/extend\");\n\nconst filter = require(\"lodash/filter\");\n\nconst includes = require(\"lodash/includes\");\n\nconst isArray = require(\"lodash/isArray\");\n\nconst isEmpty = require(\"lodash/isEmpty\");\n\nconst isNumber = require(\"lodash/isNumber\");\n\nconst isObject = require(\"lodash/isObject\");\n\nconst isString = require(\"lodash/isString\");\n\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\n\nconst consumeOption = require('./parsing/consumeOption');\n\nconst toArray = require('./parsing/toArray');\n\nlet {\n  base64EncodeURL\n} = require('./encoding/base64EncodeURL');\n\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\n\nconst generate_token = require(\"../auth_token\");\n\nconst crc32 = require('./crc32');\n\nconst ensurePresenceOf = require('./ensurePresenceOf');\n\nconst ensureOption = require('./ensureOption').defaults(config());\n\nconst entries = require('./entries');\n\nconst isRemoteUrl = require('./isRemoteUrl');\n\nconst getSDKVersions = require('./analytics/getSDKVersions');\n\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('./analytics');\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`; // Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\n\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach(attr => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n  Object.keys(layer).forEach(attr => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw new Error('Must supply font_size for text in overlay/underlay');\n    if (!layer.font_family) throw new Error('Must supply font_family for text in overlay/underlay');\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n\n  return style;\n}\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\n\n\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]); // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, match => PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\n\n\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\n\n\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\n\n\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\n\n\nfunction process_layer(layer) {\n  if (isString(layer)) {\n    let resourceType = null;\n    let layerUrl = '';\n    let fetchLayerBegin = 'fetch:';\n\n    if (layer.startsWith(fetchLayerBegin)) {\n      layerUrl = layer.substring(fetchLayerBegin.length);\n    } else if (layer.indexOf(':fetch:', 0) !== -1) {\n      const parts = layer.split(':', 3);\n      resourceType = parts[0];\n      layerUrl = parts[2];\n    } else {\n      return layer;\n    }\n\n    layer = {\n      url: layerUrl,\n      type: 'fetch'\n    };\n\n    if (resourceType) {\n      layer.resource_type = resourceType;\n    }\n  }\n\n  if (typeof layer !== 'object') {\n    return layer;\n  }\n\n  let {\n    resource_type,\n    text,\n    type,\n    public_id,\n    format,\n    url: fetchUrl\n  } = layer;\n  const components = [];\n\n  if (!isEmpty(text) && isEmpty(resource_type)) {\n    resource_type = 'text';\n  }\n\n  if (!isEmpty(fetchUrl) && isEmpty(type)) {\n    type = 'fetch';\n  }\n\n  if (!isEmpty(public_id) && !isEmpty(format)) {\n    public_id = `${public_id}.${format}`;\n  }\n\n  if (isEmpty(public_id) && resource_type !== 'text' && type !== 'fetch') {\n    throw new Error('Must supply public_id for non-text overlay');\n  }\n\n  if (!isEmpty(resource_type) && resource_type !== 'image') {\n    components.push(resource_type);\n  }\n\n  if (!isEmpty(type) && type !== 'upload') {\n    components.push(type);\n  }\n\n  if (resource_type === 'text' || resource_type === 'subtitles') {\n    if (isEmpty(public_id) && isEmpty(text)) {\n      throw new Error('Must supply either text or public_in in overlay');\n    }\n\n    const textOptions = textStyle(layer);\n\n    if (!isEmpty(textOptions)) {\n      components.push(textOptions);\n    }\n\n    if (!isEmpty(public_id)) {\n      public_id = public_id.replace('/', ':');\n      components.push(public_id);\n    }\n\n    if (!isEmpty(text)) {\n      const variablesRegex = new RegExp(/(\\$\\([a-zA-Z]\\w+\\))/g);\n      const textDividedByVariables = text.split(variablesRegex).filter(x => x);\n      const encodedParts = textDividedByVariables.map(subText => {\n        const matches = variablesRegex[Symbol.match](subText);\n        const isVariable = matches ? matches.length > 0 : false;\n\n        if (isVariable) {\n          return subText;\n        }\n\n        return encodeCurlyBraces(encodeURIComponent(smart_escape(subText, new RegExp(/([,\\/])/g))));\n      });\n      components.push(encodedParts.join(''));\n    }\n  } else if (type === 'fetch') {\n    const encodedUrl = base64EncodeURL(fetchUrl);\n    components.push(encodedUrl);\n  } else {\n    public_id = public_id.replace('/', ':');\n    components.push(public_id);\n  }\n\n  return components.join(':');\n}\n\nfunction replaceAllSubstrings(string, search, replacement = '') {\n  return string.split(search).join(replacement);\n}\n\nfunction encodeCurlyBraces(input) {\n  return replaceAllSubstrings(replaceAllSubstrings(input, '(', '%28'), ')', '%29');\n}\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\n\n\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n\n    tag = null;\n  }\n\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required');\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  const urls = options.urls;\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    media_metadata: utils.as_safe_bool(options.media_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: decodeURIComponent(utils.generate_transformation_string(clone(options))),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix),\n    visual_search: utils.as_safe_bool(options.visual_search),\n    on_success: options.on_success\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\n\n\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\n\n\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`; // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map(innerVal => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`;\n      }).join(',');\n      return `${key}=[${values}]`; // if number, convert to string\n    } else if (Number.isInteger(value)) {\n      return `${key}=${escapeMetadataValue(String(value))}`; // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations).map(transformation => {\n    const transformationString = utils.generate_transformation_string(clone(transformation));\n    const format = transformation.format;\n    return format == null ? transformationString : `${transformationString}/${format}`;\n  }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\n\n\nfunction build_custom_headers(headers) {\n  switch (true) {\n    case headers == null:\n      return void 0;\n\n    case isArray(headers):\n      return headers.join(\"\\n\");\n\n    case isObject(headers):\n      return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n\n    default:\n      return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(isObject(tr) ? clone(tr) : {\n      transformation: tr\n    }));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n\n  let effect = consumeOption(options, \"effect\");\n\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(([key, value]) => `${key}:${value}`);\n  }\n\n  let border = consumeOption(options, \"border\");\n\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) {\n    // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n\n  if (options.start_offset) {\n    options.start_offset = normalize_expression(options.start_offset);\n  }\n\n  if (options.end_offset) {\n    options.end_offset = normalize_expression(options.end_offset);\n  }\n\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n\n  [\"so\", \"eo\", \"du\"].forEach(short => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options).filter(([key, value]) => key.startsWith('$')).map(([key, value]) => {\n    delete options[key];\n    return `${key}_${normalize_expression(value)}`;\n  }).sort().concat(variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)).join(',');\n  let transformations = entries(params).filter(([key, value]) => utils.present(value)).map(([key, value]) => key + '_' + value).sort().join(',');\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n\n  if (options.asset_folder != null) {\n    params.asset_folder = options.asset_folder;\n  }\n\n  if (options.display_name != null) {\n    params.display_name = options.display_name;\n  }\n\n  if (options.unique_display_name != null) {\n    params.unique_display_name = options.unique_display_name;\n  }\n\n  if (options.visual_search != null) {\n    params.visual_search = options.visual_search;\n  }\n\n  if (options.regions != null) {\n    params.regions = JSON.stringify(options.regions);\n  }\n\n  return params;\n}\n/**\n * A list of keys used by the url() function.\n * @private\n */\n\n\nconst URL_KEYS = ['api_secret', 'auth_token', 'cdn_subdomain', 'cloud_name', 'cname', 'format', 'long_url_signature', 'private_cdn', 'resource_type', 'secure', 'secure_cdn_subdomain', 'secure_distribution', 'shorten', 'sign_url', 'ssl_detected', 'type', 'url_suffix', 'use_root_path', 'version'];\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction build_distribution_domain(source, options) {\n  const cloud_name = consumeOption(options, 'cloud_name', config().cloud_name);\n\n  if (!cloud_name) {\n    throw new Error('Must supply cloud_name in tag or in configuration');\n  }\n\n  let secure = consumeOption(options, 'secure', true);\n  const ssl_detected = consumeOption(options, 'ssl_detected', config().ssl_detected);\n\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n\n  const private_cdn = consumeOption(options, 'private_cdn', config().private_cdn);\n  const cname = consumeOption(options, 'cname', config().cname);\n  const secure_distribution = consumeOption(options, 'secure_distribution', config().secure_distribution);\n  const cdn_subdomain = consumeOption(options, 'cdn_subdomain', config().cdn_subdomain);\n  const secure_cdn_subdomain = consumeOption(options, 'secure_cdn_subdomain', config().secure_cdn_subdomain);\n  return unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n\n  if (force_version == null) {\n    force_version = true;\n  }\n\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n\n  let auth_token = consumeOption(options, \"auth_token\");\n\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n\n  let original_source = public_id;\n\n  if (public_id == null) {\n    return original_source;\n  }\n\n  public_id = public_id.toString();\n\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n    const signatureConfig = {};\n\n    if (long_url_signature) {\n      signatureConfig.algorithm = 'sha256';\n      signatureConfig.signatureLength = 32;\n    } else {\n      signatureConfig.algorithm = signature_algorithm;\n      signatureConfig.signatureLength = 8;\n    }\n\n    const truncated = compute_hash(to_sign + api_secret, signatureConfig.algorithm, 'base64').slice(0, signatureConfig.signatureLength).replace(/\\//g, '_').replace(/\\+/g, '-');\n    signature = `s--${truncated}--`;\n  }\n\n  let prefix = build_distribution_domain(public_id, options);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(/ /g, '%20');\n\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  const urlAnalytics = ensureOption(options, 'urlAnalytics', ensureOption(options, 'analytics', true));\n\n  if (urlAnalytics === true) {\n    let {\n      sdkCode: sdkCodeDefault,\n      sdkSemver: sdkSemverDefault,\n      techVersion: techVersionDefault,\n      product: productDefault\n    } = getSDKVersions();\n    const sdkCode = ensureOption(options, 'sdkCode', ensureOption(options, 'sdk_code', sdkCodeDefault));\n    const sdkSemver = ensureOption(options, 'sdkSemver', ensureOption(options, 'sdk_semver', sdkSemverDefault));\n    const techVersion = ensureOption(options, 'techVersion', ensureOption(options, 'tech_version', techVersionDefault));\n    const product = ensureOption(options, 'product', productDefault);\n    let sdkVersions = {\n      sdkCode: sdkCode,\n      sdkSemver: sdkSemver,\n      techVersion: techVersion,\n      product: product,\n      urlAnalytics\n    };\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions); // url might already have a '?' query param\n\n    let appender = '?';\n\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n\n    resultUrl = `${resultUrl}${appender}_a=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n\n      source = source + '/' + url_suffix;\n    }\n\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n\n  if (use_root_path) {\n    if (resource_type === 'image' && type === 'upload' || resource_type === 'images' && type == null) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n\n  return [resource_type, type];\n} // cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\n\nfunction unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution) {\n  let prefix;\n\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n\n  let shared_domain = !private_cdn;\n\n  if (secure) {\n    if (secure_distribution == null || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n\n    if (secure_cdn_subdomain == null && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + (crc32(source) % 5 + 1 + '.cloudinary.com'));\n    }\n\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + (crc32(source) % 5 + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + (crc32(source) % 5 + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n\n  return prefix;\n}\n\nfunction base_api_url_v1_1() {\n  return base_api_url('v1_1');\n}\n\nfunction base_api_url_v2() {\n  return base_api_url('v2');\n}\n\nfunction base_api_url(api_version) {\n  if (!api_version || api_version.length === 0) {\n    throw new Error('api_version needs to be a non-empty string');\n  }\n\n  return (path = [], options = []) => {\n    let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n    let cloud_name = ensureOption(options, \"cloud_name\");\n\n    let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n\n    let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n    return [cloudinary, api_version, cloud_name].concat(encoded_path).join(\"/\");\n  };\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url_v1_1()([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(([k, v]) => utils.present(v)).map(([k, v]) => `${k}=${toArray(v).join(\",\")}`).sort().join(\"&\");\n  return compute_hash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\n\n\nfunction compute_hash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n\n  const hash = crypto.createHash(signature_algorithm).update(input).digest();\n  return Buffer.from(hash).toString(encoding);\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(([k, v]) => utils.present(v)).forEach(([k, v]) => {\n    filtered_hash[k] = v.filter ? v.filter(x => x) : v;\n  });\n  return filtered_hash;\n}\n\nfunction sort_object_by_key(object) {\n  return Object.keys(object).sort().reduce((obj, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n}\n\nfunction merge(hash1, hash2) {\n  return { ...hash1,\n    ...hash2\n  };\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return compute_hash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\n\n\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if (options.unsigned != null && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\n\n\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url_v1()(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\n\n\nfunction api_download_url(action, params, options) {\n  const download_params = { ...params,\n    mode: \"download\"\n  };\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\n\n\nfunction download_archive_url(options = {}) {\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }));\n  return api_download_url(\"generate_archive\", params, options);\n}\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\n\n\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\n\n\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\n\n\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n/**\n *\n * @param attrs\n * @return {*}\n */\n\n\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n\n    if (callback == null && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map(name => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`); // Split a range into the start and end values\n\nfunction split_range(range) {\n  // :nodoc:\n  switch (range.constructor) {\n    case String:\n      if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n        return range;\n      }\n\n      return range.split(\"..\");\n\n    case Array:\n      return [first(range), last(range)];\n\n    default:\n      return [null, null];\n  }\n}\n\nfunction norm_range_value(value) {\n  // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n\n  return value;\n}\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\n\n\nfunction process_video_params(param) {\n  switch (param.constructor) {\n    case Object:\n      {\n        let video = \"\";\n\n        if ('codec' in param) {\n          video = param.codec;\n\n          if ('profile' in param) {\n            video += \":\" + param.profile;\n\n            if ('level' in param) {\n              video += \":\" + param.level;\n            }\n          }\n        }\n\n        return video;\n      }\n\n    case String:\n      return param;\n\n    default:\n      return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\n\nexports.process_layer = process_layer;\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, {\n    public_id\n  }, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n\n  breakpoints = clone(breakpoints);\n\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(clone(breakpoint_settings.transformation));\n      }\n    }\n  }\n\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(r => ({\n      transformation: utils.generate_transformation_string(r.transformation)\n    })));\n  }\n\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n\n    return parameters;\n  }, []);\n}\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\n\n\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`).join('&');\n}\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n\n  if (source) {\n    keys.forEach(key => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n\n  return result;\n}\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n\n  if (!isArray(data)) {\n    data = [data];\n  }\n\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n\n  return JSON.stringify(data);\n}\n/**\n * Empty function - do nothing\n *\n */\n\n\nexports.NOP = function () {};\n\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\n\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\n\nexports.option_consume = consumeOption; // for backwards compatibility\n\nexports.build_array = toArray; // for backwards compatibility\n\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\n\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url_v1 = base_api_url_v1_1;\nexports.base_api_url_v2 = base_api_url_v2;\nexports.download_backedup_asset = download_backedup_asset;\nexports.compute_hash = compute_hash;\nexports.build_distribution_domain = build_distribution_domain;\nexports.sort_object_by_key = sort_object_by_key; // was exported before, so kept for backwards compatibility\n\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});","map":{"version":3,"sources":["C:/Users/ANCHAL MAURYA/Desktop/mern-social-media/client/node_modules/cloudinary/lib/utils/index.js"],"names":["crypto","require","querystring","urlParse","parse","compact","first","isFunction","isPlainObject","last","map","take","at","clone","extend","filter","includes","isArray","isEmpty","isNumber","isObject","isString","isUndefined","smart_escape","consumeOption","toArray","base64EncodeURL","encodeDoubleArray","config","generate_token","crc32","ensurePresenceOf","ensureOption","defaults","entries","isRemoteUrl","getSDKVersions","getAnalyticsOptions","getSDKAnalyticsSignature","exports","module","utils","VERSION","version","error","generate_auth_token","options","token_options","Object","assign","auth_token","CF_SHARED_CDN","OLD_AKAMAI_SHARED_CDN","AKAMAI_SHARED_CDN","SHARED_CDN","USER_AGENT","process","versions","node","userPlatform","getUserAgent","DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION","DEFAULT_POSTER_OPTIONS","DEFAULT_VIDEO_SOURCE_TYPES","CONDITIONAL_OPERATORS","PREDEFINED_VARS","LAYER_KEYWORD_PARAMS","TRANSFORMATION_PARAMS","SIMPLE_PARAMS","UPLOAD_PREFIX","SUPPORTED_SIGNATURE_ALGORITHMS","DEFAULT_SIGNATURE_ALGORITHM","textStyle","layer","keywords","style","text_style","keys","forEach","attr","default_value","attr_value","push","split","pop","hasOwnProperty","font_size","Error","font_family","unshift","join","normalize_expression","expression","length","match","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","v","userVariablePattern","variablesReplaceRE","process_custom_function","customFunction","function_type","encodedSource","source","process_custom_pre_function","customPreFunction","result","process_if","ifValue","process_layer","resourceType","layerUrl","fetchLayerBegin","startsWith","substring","indexOf","parts","url","type","resource_type","text","public_id","format","fetchUrl","components","textOptions","variablesRegex","textDividedByVariables","x","encodedParts","subText","matches","Symbol","isVariable","encodeCurlyBraces","encodeURIComponent","encodedUrl","replaceAllSubstrings","string","search","replacement","input","process_radius","radius","findIndex","build_multi_and_sprite_params","tagOrOptions","tag","urls","transformation","generate_transformation_string","fetch_format","timestamp","async","notification_url","build_upload_params","params","access_mode","allowed_formats","asset_folder","as_safe_bool","backup","callback","cinemagraph_analysis","colors","display_name","discard_original_filename","eager","build_eager","eager_async","eager_notification_url","eval","exif","faces","folder","filename_override","image_metadata","media_metadata","invalidate","moderation","overwrite","phash","proxy","public_id_prefix","quality_analysis","responsive_breakpoints","generate_responsive_breakpoints_string","return_delete_token","decodeURIComponent","unique_filename","upload_preset","use_filename","use_filename_as_display_name","quality_override","accessibility_analysis","use_asset_folder_as_public_id_prefix","visual_search","on_success","updateable_resource_params","encode_key_value","arg","k","escapeMetadataValue","value","toString","encode_context","metadataObj","key","values","innerVal","Number","isInteger","String","transformations","transformationString","build_custom_headers","headers","t","present","responsive_width","width","height","size","has_layer","overlay","underlay","crop","angle","no_html_sizes","parseFloat","background","color","base_transformations","named_transformation","some","tr","effect","border","exec","flags","dpr","offset","start_offset","end_offset","split_range","custom_function","custom_pre_function","fps","a","ar","b","bo","c","co","e","fl","fn","h","ki","l","o","q","r","u","w","y","z","name","short","undefined","vc","process_video_params","norm_range_value","variablesParam","variables","sort","concat","raw_transformation","responsive_width_transformation","responsive","hidpi","access_control","jsonArrayParam","auto_tagging","background_removal","categorization","context","metadata","custom_coordinates","detection","face_coordinates","ocr","raw_convert","similarity_search","tags","unique_display_name","regions","JSON","stringify","URL_KEYS","extractUrlParams","pickOnlyExistingValues","extractTransformationParams","patchFetchFormat","build_distribution_domain","cloud_name","secure","ssl_detected","private_cdn","cname","secure_distribution","cdn_subdomain","secure_cdn_subdomain","unsigned_url_prefix","signature","source_to_sign","force_version","long_url_signature","shorten","sign_url","api_secret","url_suffix","use_root_path","signature_algorithm","merge","preloaded","original_source","finalize_resource_type","finalize_source","to_sign","part","signatureConfig","algorithm","signatureLength","truncated","compute_hash","slice","prefix","resultUrl","path","token","urlAnalytics","sdkCode","sdkCodeDefault","sdkSemver","sdkSemverDefault","techVersion","techVersionDefault","product","productDefault","sdkVersions","analyticsOptions","sdkAnalyticsSignature","appender","video_url","video_thumbnail_url","shared_domain","subdomain","cdn_part","subdomain_part","host","base_api_url_v1_1","base_api_url","base_api_url_v2","api_version","cloudinary","encode_path","unencoded_path","encoded_path","Array","api_url","action","random_public_id","randomBytes","signed_preloaded_image","api_sign_request","params_to_sign","encoding","hash","createHash","update","digest","Buffer","from","clear_blank","filtered_hash","sort_object_by_key","object","reduce","obj","hash1","hash2","sign_request","apiKey","apiSecret","api_key","webhook_signature","data","verifyNotificationSignature","body","valid_for","Math","round","Date","now","payload_hash","process_request_params","unsigned","oauth_token","private_download_url","attachment","expires_at","zip_download_url","hashToQuery","download_backedup_asset","asset_id","version_id","base_api_url_v1","api_download_url","download_params","mode","cloudinary_params","download_archive_url","archive_params","download_zip_url","target_format","download_folder","folder_path","prefixes","join_pair","escapeQuotes","html_attrs","attrs","CLOUDINARY_JS_CONFIG_PARAMS","cloudinary_js_config","v1_result_adapter","v1_adapter","num_pass_args","v1","args","pass_args","apply","v1_adapters","mapping","NUMBER_PATTERN","OFFSET_ANY_PATTERN","RANGE_VALUE_RE","OFFSET_ANY_PATTERN_RE","range","constructor","test","modifier","param","video","codec","profile","level","allow_missing","flatten_folders","flatten_transformations","keep_derived","fully_qualified_public_ids","public_ids","skip_transformation_name","target_public_id","target_tags","use_original_filename","create_source_tag","src","source_type","codecs","video_type","mime_type","codecs_str","build_explicit_api_params","breakpoints","j","breakpoint_settings","build_streaming_profiles_param","representations","hashToParameters","parameters","endsWith","items","escape","NOP","floor","getTime","option_consume","build_array","encode_double_array","only"],"mappings":"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","sourcesContent":["/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet {base64EncodeURL} = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\n\nconst getSDKVersions = require('./analytics/getSDKVersions');\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('./analytics');\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach((attr) => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n\n  Object.keys(layer).forEach((attr) => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw new Error('Must supply font_size for text in overlay/underlay');\n    if (!layer.font_family) throw new Error('Must supply font_family for text in overlay/underlay');\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, (match) => (PREDEFINED_VARS[match] || match));\n\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  if (isString(layer)) {\n    let resourceType = null;\n    let layerUrl = '';\n\n    let fetchLayerBegin = 'fetch:';\n    if (layer.startsWith(fetchLayerBegin)) {\n      layerUrl = layer.substring(fetchLayerBegin.length);\n    } else if (layer.indexOf(':fetch:', 0) !== -1) {\n      const parts = layer.split(':', 3);\n      resourceType = parts[0];\n      layerUrl = parts[2];\n    } else {\n      return layer;\n    }\n\n    layer = {\n      url: layerUrl,\n      type: 'fetch'\n    };\n\n    if (resourceType) {\n      layer.resource_type = resourceType;\n    }\n  }\n\n  if (typeof layer !== 'object') {\n    return layer;\n  }\n\n  let {\n    resource_type,\n    text,\n    type,\n    public_id,\n    format,\n    url: fetchUrl\n  } = layer;\n  const components = [];\n\n  if (!isEmpty(text) && isEmpty(resource_type)) {\n    resource_type = 'text';\n  }\n\n  if (!isEmpty(fetchUrl) && isEmpty(type)) {\n    type = 'fetch';\n  }\n\n  if (!isEmpty(public_id) && !isEmpty(format)) {\n    public_id = `${public_id}.${format}`;\n  }\n\n  if (isEmpty(public_id) && resource_type !== 'text' && type !== 'fetch') {\n    throw new Error('Must supply public_id for non-text overlay');\n  }\n\n  if (!isEmpty(resource_type) && resource_type !== 'image') {\n    components.push(resource_type);\n  }\n\n  if (!isEmpty(type) && type !== 'upload') {\n    components.push(type);\n  }\n\n  if (resource_type === 'text' || resource_type === 'subtitles') {\n    if (isEmpty(public_id) && isEmpty(text)) {\n      throw new Error('Must supply either text or public_in in overlay');\n    }\n\n    const textOptions = textStyle(layer);\n\n    if (!isEmpty(textOptions)) {\n      components.push(textOptions);\n    }\n\n    if (!isEmpty(public_id)) {\n      public_id = public_id.replace('/', ':');\n      components.push(public_id);\n    }\n\n    if (!isEmpty(text)) {\n      const variablesRegex = new RegExp(/(\\$\\([a-zA-Z]\\w+\\))/g);\n      const textDividedByVariables = text.split(variablesRegex).filter(x => x);\n      const encodedParts = textDividedByVariables.map(subText => {\n        const matches = variablesRegex[Symbol.match](subText);\n        const isVariable = matches ? matches.length > 0 : false;\n        if (isVariable) {\n          return subText;\n        }\n        return encodeCurlyBraces(encodeURIComponent(smart_escape(subText, new RegExp(/([,\\/])/g))));\n      });\n      components.push(encodedParts.join(''));\n    }\n  } else if (type === 'fetch') {\n    const encodedUrl = base64EncodeURL(fetchUrl);\n    components.push(encodedUrl);\n  } else {\n    public_id = public_id.replace('/', ':');\n    components.push(public_id);\n  }\n\n  return components.join(':');\n}\n\nfunction replaceAllSubstrings(string, search, replacement = '') {\n  return string.split(search).join(replacement);\n}\n\nfunction encodeCurlyBraces(input) {\n  return replaceAllSubstrings(replaceAllSubstrings(input, '(', '%28'), ')', '%29');\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n    tag = null;\n  }\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required')\n  }\n  if (!options) {\n    options = {}\n  }\n  const urls = options.urls\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    media_metadata: utils.as_safe_bool(options.media_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: decodeURIComponent(utils.generate_transformation_string(clone(options))),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix),\n    visual_search: utils.as_safe_bool(options.visual_search),\n    on_success: options.on_success\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map((innerVal) => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`\n      }).join(',');\n      return `${key}=[${values}]`\n      // if number, convert to string\n    } else if (Number.isInteger(value)) {\n      return `${key}=${escapeMetadataValue(String(value))}`;\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations)\n    .map((transformation) => {\n      const transformationString = utils.generate_transformation_string(clone(transformation));\n      const format = transformation.format;\n      return format == null ? transformationString : `${transformationString}/${format}`;\n    }).join('|');\n}\n\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n  case headers == null:\n    return void 0;\n  case isArray(headers):\n    return headers.join(\"\\n\");\n  case isObject(headers):\n    return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n  default:\n    return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(\n      isObject(tr) ? clone(tr) : {transformation: tr}\n    ));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(\n      ([key, value]) => `${key}:${value}`\n    );\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) { // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  if (options.start_offset) {\n    options.start_offset = normalize_expression(options.start_offset);\n  }\n  if (options.end_offset) {\n    options.end_offset = normalize_expression(options.end_offset);\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach((short) => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options)\n    .filter(([key, value]) => key.startsWith('$'))\n    .map(([key, value]) => {\n      delete options[key];\n      return `${key}_${normalize_expression(value)}`;\n    }).sort().concat(\n      variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)\n    ).join(',');\n\n  let transformations = entries(params)\n    .filter(([key, value]) => utils.present(value))\n    .map(([key, value]) => key + '_' + value)\n    .sort()\n    .join(',');\n\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation\n      || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  if (options.asset_folder != null) {\n    params.asset_folder = options.asset_folder;\n  }\n  if (options.display_name != null) {\n    params.display_name = options.display_name;\n  }\n  if (options.unique_display_name != null) {\n    params.unique_display_name = options.unique_display_name;\n  }\n  if (options.visual_search != null) {\n    params.visual_search = options.visual_search;\n  }\n  if (options.regions != null) {\n    params.regions = JSON.stringify(options.regions);\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = [\n  'api_secret',\n  'auth_token',\n  'cdn_subdomain',\n  'cloud_name',\n  'cname',\n  'format',\n  'long_url_signature',\n  'private_cdn',\n  'resource_type',\n  'secure',\n  'secure_cdn_subdomain',\n  'secure_distribution',\n  'shorten',\n  'sign_url',\n  'ssl_detected',\n  'type',\n  'url_suffix',\n  'use_root_path',\n  'version'\n];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction build_distribution_domain(source, options) {\n  const cloud_name = consumeOption(options, 'cloud_name', config().cloud_name);\n  if (!cloud_name) {\n    throw new Error('Must supply cloud_name in tag or in configuration');\n  }\n\n  let secure = consumeOption(options, 'secure', true);\n  const ssl_detected = consumeOption(options, 'ssl_detected', config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n\n  const private_cdn = consumeOption(options, 'private_cdn', config().private_cdn);\n  const cname = consumeOption(options, 'cname', config().cname);\n  const secure_distribution = consumeOption(options, 'secure_distribution', config().secure_distribution);\n  const cdn_subdomain = consumeOption(options, 'cdn_subdomain', config().cdn_subdomain);\n  const secure_cdn_subdomain = consumeOption(options, 'secure_cdn_subdomain', config().secure_cdn_subdomain);\n\n  return unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return (part != null) && part !== '';\n    }).join('/');\n\n    const signatureConfig = {};\n    if (long_url_signature) {\n      signatureConfig.algorithm = 'sha256';\n      signatureConfig.signatureLength = 32;\n    } else {\n      signatureConfig.algorithm = signature_algorithm;\n      signatureConfig.signatureLength = 8;\n    }\n\n    const truncated = compute_hash(to_sign + api_secret, signatureConfig.algorithm, 'base64')\n      .slice(0, signatureConfig.signatureLength)\n      .replace(/\\//g, '_')\n      .replace(/\\+/g, '-');\n    signature = `s--${truncated}--`;\n  }\n\n  let prefix = build_distribution_domain(public_id, options);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return (part != null) && part !== '';\n  }).join('/').replace(/ /g, '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  const urlAnalytics = ensureOption(options, 'urlAnalytics', ensureOption(options, 'analytics', true));\n\n  if (urlAnalytics === true) {\n    let {\n      sdkCode: sdkCodeDefault,\n      sdkSemver: sdkSemverDefault,\n      techVersion: techVersionDefault,\n      product: productDefault\n    } = getSDKVersions();\n    const sdkCode = ensureOption(options, 'sdkCode', ensureOption(options, 'sdk_code', sdkCodeDefault));\n    const sdkSemver = ensureOption(options, 'sdkSemver', ensureOption(options, 'sdk_semver', sdkSemverDefault));\n    const techVersion = ensureOption(options, 'techVersion', ensureOption(options, 'tech_version', techVersionDefault));\n    const product = ensureOption(options, 'product', productDefault);\n\n    let sdkVersions = {\n      sdkCode: sdkCode,\n      sdkSemver: sdkSemver,\n      techVersion: techVersion,\n      product: product,\n      urlAnalytics\n    };\n\n    let analyticsOptions = getAnalyticsOptions(\n      Object.assign({}, options, sdkVersions)\n    );\n\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_a=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if ((resource_type === 'image' && type === 'upload') || (resource_type === 'images' && (type == null))) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(\n  source,\n  cloud_name,\n  private_cdn,\n  cdn_subdomain,\n  secure_cdn_subdomain,\n  cname,\n  secure,\n  secure_distribution\n) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if ((secure_distribution == null) || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if ((secure_cdn_subdomain == null) && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + ((crc32(source) % 5) + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + ((crc32(source) % 5) + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + ((crc32(source) % 5) + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\n\nfunction base_api_url_v1_1() {\n  return base_api_url('v1_1');\n}\n\nfunction base_api_url_v2() {\n  return base_api_url('v2');\n}\n\nfunction base_api_url(api_version) {\n  if (!api_version || api_version.length === 0) {\n    throw new Error('api_version needs to be a non-empty string');\n  }\n\n  return (path = [], options = []) => {\n    let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n    let cloud_name = ensureOption(options, \"cloud_name\");\n    let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n    let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n    return [cloudinary, api_version, cloud_name].concat(encoded_path).join(\"/\");\n  };\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url_v1_1()([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(\n    ([k, v]) => utils.present(v)\n  ).map(\n    ([k, v]) => `${k}=${toArray(v).join(\",\")}`\n  ).sort().join(\"&\");\n  return compute_hash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\nfunction compute_hash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n  const hash = crypto.createHash(signature_algorithm).update(input).digest();\n  return Buffer.from(hash).toString(encoding);\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(\n    ([k, v]) => utils.present(v)\n  ).forEach(\n    ([k, v]) => {\n      filtered_hash[k] = v.filter ? v.filter(x => x) : v;\n    }\n  );\n  return filtered_hash;\n}\n\nfunction sort_object_by_key(object) {\n  return Object.keys(object).sort().reduce((obj, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n}\n\nfunction merge(hash1, hash2) {\n  return {...hash1, ...hash2};\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return compute_hash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if ((options.unsigned != null) && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url_v1()(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\nfunction api_download_url(action, params, options) {\n  const download_params = {\n    ...params,\n    mode: \"download\"\n  }\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url(options = {}) {\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }))\n  return api_download_url(\"generate_archive\", params, options)\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if ((callback == null) && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map((name) => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\n\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) { // :nodoc:\n  switch (range.constructor) {\n  case String:\n    if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n      return range;\n    }\n    return range.split(\"..\");\n  case Array:\n    return [first(range), last(range)];\n  default:\n    return [null, null];\n  }\n}\n\nfunction norm_range_value(value) { // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n  case Object: {\n    let video = \"\";\n    if ('codec' in param) {\n      video = param.codec;\n      if ('profile' in param) {\n        video += \":\" + param.profile;\n        if ('level' in param) {\n          video += \":\" + param.level;\n        }\n      }\n    }\n    return video;\n  }\n  case String:\n    return param;\n  default:\n    return null;\n  }\n}\n\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\n\nexports.process_layer = process_layer;\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, {public_id}, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(\n          clone(breakpoint_settings.transformation)\n        );\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(\n      r => ({\n        transformation: utils.generate_transformation_string(r.transformation)\n      })\n    ));\n  }\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(\n    ([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`\n  ).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n  if (source) {\n    keys.forEach((key) => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {\n};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url_v1 = base_api_url_v1_1;\nexports.base_api_url_v2 = base_api_url_v2;\nexports.download_backedup_asset = download_backedup_asset;\nexports.compute_hash = compute_hash;\nexports.build_distribution_domain = build_distribution_domain;\nexports.sort_object_by_key = sort_object_by_key;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\n\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});\n"]},"metadata":{},"sourceType":"script"}